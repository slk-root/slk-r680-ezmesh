/*
 **************************************************************************
 * Copyright (c) 2021, The Linux Foundation. All rights reserved.
 *
 * Permission to use, copy, modify, and/or distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 **************************************************************************
 */

#ifndef __NSS_WIFI_MESH_STATS_H__
#define __NSS_WIFI_MESH_STATS_H__

/**
 * Array of pointer for NSS Wi-Fi mesh handles.
 * Each handle has per-tunnel statistics based on the interface number which is an index.
 */
struct nss_wifi_mesh_stats_handle {
	nss_if_num_t if_num;				/**< Interface number. */
	uint32_t mesh_idx;				/**< Mesh index.  */
	struct nss_wifi_mesh_stats_sync_msg stats;	/**< Stats per-interface number. */
};

/**
 * nss_wifi_mesh_encap_stats_type
 *	Wi-Fi mesh encap stats types.
 */
enum nss_wifi_mesh_encap_stats_type {
	NSS_WIFI_MESH_ENCAP_STATS_TYPE_PNODE_RX_PACKETS,
	NSS_WIFI_MESH_ENCAP_STATS_TYPE_PNODE_RX_BYTES,
	NSS_WIFI_MESH_ENCAP_STATS_TYPE_PNODE_TX_PACKETS,
	NSS_WIFI_MESH_ENCAP_STATS_TYPE_PNODE_TX_BYTES,
	NSS_WIFI_MESH_ENCAP_STATS_TYPE_PNODE_RX_DROPPED,
	NSS_WIFI_MESH_ENCAP_STATS_TYPE_DEQUEUE_COUNT,
	NSS_WIFI_MESH_ENCAP_STATS_TYPE_MC_COUNT,
	NSS_WIFI_MESH_ENCAP_STATS_TYPE_MP_NOT_FOUND,
	NSS_WIFI_MESH_ENCAP_STATS_TYPE_MP_ACTIVE,
	NSS_WIFI_MESH_ENCAP_STATS_TYPE_MPP_NOT_FOUND,
	NSS_WIFI_MESH_ENCAP_STATS_TYPE_MPP_FOUND,
	NSS_WIFI_MESH_ENCAP_STATS_TYPE_HDR_FAIL,
	NSS_WIFI_MESH_ENCAP_STATS_TYPE_MP_DEL_NOTIFY_FAIL,
	NSS_WIFI_MESH_ENCAP_STATS_TYPE_LINK_ENQUEUE,
	NSS_WIFI_MESH_ENCAP_STATS_TYPE_LINK_ENQUEUE_FAIL,
	NSS_WIFI_MESH_ENCAP_STATS_TYPE_RA_LOOKUP_FAIL,
	NSS_WIFI_MESH_ENCAP_STATS_TYPE_DUMMY_ADD_COUNT,
	NSS_WIFI_MESH_ENCAP_STATS_TYPE_MP_ADD_NOTIFY_FAIL,
	NSS_WIFI_MESH_ENCAP_STATS_TYPE_DUMMY_ADD_FAIL,
	NSS_WIFI_MESH_ENCAP_STATS_TYPE_DUMMY_LOOKUP_FAIL,
	NSS_WIFI_MESH_ENCAP_STATS_TYPE_PENDING_QLIMIT_DROP,
	NSS_WIFI_MESH_ENCAP_STATS_TYPE_PENDING_ENQUEUE,
	NSS_WIFI_MESH_ENCAP_STATS_TYPE_EXPIRY_NOTIFY_FAIL,
	NSS_WIFI_MESH_ENCAP_STATS_TYPE_MAX
};

/**
 * nss_wifi_mesh_decap_stats_type
 *	Wi-Fi mesh decap stats types.
 */
enum nss_wifi_mesh_decap_stats_type {
	NSS_WIFI_MESH_DECAP_STATS_TYPE_PNODE_RX_PACKETS,
	NSS_WIFI_MESH_DECAP_STATS_TYPE_PNODE_RX_BYTES,
	NSS_WIFI_MESH_DECAP_STATS_TYPE_PNODE_TX_PACKETS,
	NSS_WIFI_MESH_DECAP_STATS_TYPE_PNODE_TX_BYTES,
	NSS_WIFI_MESH_DECAP_STATS_TYPE_PNODE_RX_DROPPED,
	NSS_WIFI_MESH_DECAP_STATS_TYPE_ENQUEUE_COUNT_EXCEEDED,
	NSS_WIFI_MESH_DECAP_STATS_TYPE_COUNT,
	NSS_WIFI_MESH_DECAP_STATS_TYPE_MC_DROP,
	NSS_WIFI_MESH_DECAP_STATS_TYPE_TTL0,
	NSS_WIFI_MESH_DECAP_STATS_TYPE_MPP_LOOKUP_FAIL,
	NSS_WIFI_MESH_DECAP_STATS_TYPE_HDR_FAIL,
	NSS_WIFI_MESH_DECAP_STATS_TYPE_RX_FWD_FAIL,
	NSS_WIFI_MESH_DECAP_STATS_TYPE_RX_FWD_SUCCESS,
	NSS_WIFI_MESH_DECAP_STATS_TYPE_MP_FWD_LOOKUP_FAIL,
	NSS_WIFI_MESH_DECAP_STATS_TYPE_MP_FWD_INACTIVE,
	NSS_WIFI_MESH_DECAP_STATS_TYPE_MNODE_FWD_SUCCESS,
	NSS_WIFI_MESH_DECAP_STATS_TYPE_MNODE_FWD_FAIL,
	NSS_WIFI_MESH_DECAP_STATS_TYPE_MPP_ADD_FAIL,
	NSS_WIFI_MESH_DECAP_STATS_TYPE_MPP_ADD_EVENT_TO_HOST_FAIL,
	NSS_WIFI_MESH_DECAP_STATS_TYPE_MPP_UPDATE_FAIL,
	NSS_WIFI_MESH_DECAP_STATS_TYPE_MPP_UPDATE_EVENT_TO_HOST_FAIL,
	NSS_WIFI_MESH_DECAP_STATS_TYPE_MPP_LEARN_TO_HOST_FAIL,
	NSS_WIFI_MESH_DECAP_STATS_TYPE_MAX
};

/**
 * nss_wifi_mesh_path_stats_type
 *	Wi-Fi mesh path stats types.
 */
enum nss_wifi_mesh_path_stats_type {
	NSS_WIFI_MESH_PATH_STATS_TYPE_ALLOC_FAILURES,
	NSS_WIFI_MESH_PATH_STATS_TYPE_ERROR_MAX_RADIO_COUNT,
	NSS_WIFI_MESH_PATH_STATS_TYPE_INVALID_INTERFACE_FAILURES,
	NSS_WIFI_MESH_PATH_STATS_TYPE_ADD_SUCCESS,
	NSS_WIFI_MESH_PATH_STATS_TYPE_TABLE_FULL_ERRORS,
	NSS_WIFI_MESH_PATH_STATS_TYPE_INSERT_FAILURES,
	NSS_WIFI_MESH_PATH_STATS_TYPE_NOT_FOUND,
	NSS_WIFI_MESH_PATH_STATS_TYPE_DELETE_SUCCESS,
	NSS_WIFI_MESH_PATH_STATS_TYPE_UPDATE_SUCCESS,
	NSS_WIFI_MESH_PATH_STATS_TYPE_MAX
};

/**
 * nss_wifi_mesh_proxy_path_stats_type
 *	Wi-Fi mesh proxy path stats types.
 */
enum nss_wifi_mesh_proxy_path_stats_type {
	NSS_WIFI_MESH_PROXY_PATH_STATS_TYPE_ALLOC_FAILURES,
	NSS_WIFI_MESH_PROXY_PATH_STATS_TYPE_ENTRY_EXIST_FAILURES,
	NSS_WIFI_MESH_PROXY_PATH_STATS_TYPE_ADD_SUCCESS,
	NSS_WIFI_MESH_PROXY_PATH_STATS_TYPE_TABLE_FULL_ERRORS,
	NSS_WIFI_MESH_PROXY_PATH_STATS_TYPE_INSERT_FAILURES,
	NSS_WIFI_MESH_PROXY_PATH_STATS_TYPE_NOT_FOUND,
	NSS_WIFI_MESH_PROXY_PATH_STATS_TYPE_UNHASHED_ERRORS,
	NSS_WIFI_MESH_PROXY_PATH_STATS_TYPE_DELTE_FAILURES,
	NSS_WIFI_MESH_PROXY_PATH_STATS_TYPE_DELETE_SUCCESS,
	NSS_WIFI_MESH_PROXY_PATH_STATS_TYPE_UPDATE_SUCCESS,
	NSS_WIFI_MESH_PROXY_PATH_STATS_TYPE_LOOKUP_SUCCESS,
	NSS_WIFI_MESH_PROXY_PATH_STATS_TYPE_MAX
};

/*
 * Wi-Fi Mesh statistics APIs
 */
extern void nss_wifi_mesh_update_stats(nss_if_num_t if_num, struct nss_wifi_mesh_stats_sync_msg *mstats);
extern void nss_wifi_mesh_stats_notify(nss_if_num_t if_num, uint32_t core_id);
extern struct dentry *nss_wifi_mesh_stats_dentry_create(void);
extern struct nss_wifi_mesh_stats_handle *nss_wifi_mesh_get_stats_handle(nss_if_num_t if_num);
extern bool nss_wifi_mesh_stats_handle_alloc(nss_if_num_t if_num);
extern bool nss_wifi_mesh_stats_handle_free(nss_if_num_t if_num);
#endif /* __NSS_WIFI_MESH_STATS_H__ */
