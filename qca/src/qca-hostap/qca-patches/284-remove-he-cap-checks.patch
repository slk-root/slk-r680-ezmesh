diff --git a/src/common/hw_features_common.c b/src/common/hw_features_common.c
index e6ed6eb..59cedfd 100644
--- a/src/common/hw_features_common.c
+++ b/src/common/hw_features_common.c
@@ -474,67 +474,7 @@ int hostapd_set_freq_params(struct hostapd_freq_params *data,
 		return 0;
 	}
 
-	if (data->he_enabled) switch (oper_chwidth) {
-	case CHANWIDTH_USE_HT:
-		if (mode == HOSTAPD_MODE_IEEE80211G && sec_channel_offset) {
-			if (!(he_cap->phy_cap[HE_PHYCAP_CHANNEL_WIDTH_SET_IDX] &
-			      HE_PHYCAP_CHANNEL_WIDTH_SET_40MHZ_IN_2G)) {
-				wpa_printf(MSG_ERROR,
-					   "40 MHz channel width is not supported in 2.4 GHz");
-				return -1;
-			}
-			break;
-		}
-		/* fall through */
-	case CHANWIDTH_80MHZ:
-		if (mode == HOSTAPD_MODE_IEEE80211A) {
-			if (!(he_cap->phy_cap[HE_PHYCAP_CHANNEL_WIDTH_SET_IDX] &
-			      HE_PHYCAP_CHANNEL_WIDTH_SET_40MHZ_80MHZ_IN_5G)) {
-				wpa_printf(MSG_ERROR,
-					   "40/80 MHz channel width is not supported in 5/6 GHz");
-				return -1;
-			}
-		}
-		break;
-	case CHANWIDTH_80P80MHZ:
-		if (!(he_cap->phy_cap[HE_PHYCAP_CHANNEL_WIDTH_SET_IDX] &
-		      HE_PHYCAP_CHANNEL_WIDTH_SET_80PLUS80MHZ_IN_5G)) {
-			wpa_printf(MSG_ERROR,
-				   "80+80 MHz channel width is not supported in 5/6 GHz");
-			return -1;
-		}
-		break;
-	case CHANWIDTH_160MHZ:
-		if (!(he_cap->phy_cap[HE_PHYCAP_CHANNEL_WIDTH_SET_IDX] &
-		      HE_PHYCAP_CHANNEL_WIDTH_SET_160MHZ_IN_5G)) {
-			wpa_printf(MSG_ERROR,
-				   "160 MHz channel width is not supported in 5 / 6GHz");
-			return -1;
-		}
-		break;
-	} else if (data->vht_enabled) switch (oper_chwidth) {
-	case CHANWIDTH_USE_HT:
-		break;
-	case CHANWIDTH_80P80MHZ:
-		if (!(vht_caps & VHT_CAP_SUPP_CHAN_WIDTH_160_80PLUS80MHZ)) {
-			wpa_printf(MSG_ERROR,
-				   "80+80 channel width is not supported!");
-			return -1;
-		}
-		/* fall through */
-	case CHANWIDTH_80MHZ:
-		break;
-	case CHANWIDTH_160MHZ:
-		if (!(vht_caps & (VHT_CAP_SUPP_CHAN_WIDTH_160MHZ |
-				  VHT_CAP_SUPP_CHAN_WIDTH_160_80PLUS80MHZ))) {
-			wpa_printf(MSG_ERROR,
-				   "160 MHz channel width is not supported!");
-			return -1;
-		}
-		break;
-	}
-
-	if (data->he_enabled || data->vht_enabled) switch (oper_chwidth) {
+	if (data->vht_enabled) switch (oper_chwidth) {
 	case CHANWIDTH_USE_HT:
 		if (center_segment1 ||
 		    (center_segment0 != 0 &&
@@ -543,6 +483,11 @@ int hostapd_set_freq_params(struct hostapd_freq_params *data,
 			return -1;
 		break;
 	case CHANWIDTH_80P80MHZ:
+		if (!(vht_caps & VHT_CAP_SUPP_CHAN_WIDTH_160_80PLUS80MHZ)) {
+			wpa_printf(MSG_ERROR,
+					"80+80 channel width is not supported!");
+			return -1;
+		}
 		if (center_segment1 == center_segment0 + 4 ||
 		    center_segment1 == center_segment0 - 4)
 			return -1;
@@ -587,6 +532,12 @@ int hostapd_set_freq_params(struct hostapd_freq_params *data,
 		break;
 	case CHANWIDTH_160MHZ:
 		data->bandwidth = 160;
+		if (!(vht_caps & (VHT_CAP_SUPP_CHAN_WIDTH_160MHZ |
+						VHT_CAP_SUPP_CHAN_WIDTH_160_80PLUS80MHZ))) {
+			wpa_printf(MSG_ERROR,
+					"160MHZ channel width is not supported!");
+			return -1;
+		}
 		if (center_segment1)
 			return -1;
 		if (!sec_channel_offset)
