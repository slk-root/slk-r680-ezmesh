/*====*====*====*====*====*====*====*====*====*====*====*====*====*====*====*

        LOWI Util Strings

GENERAL DESCRIPTION
  This file contains the implementation of LOWI Utils

Copyright (c) 2016, 2018-2019 Qualcomm Technologies, Inc.
All Rights Reserved.
Confidential and Proprietary - Qualcomm Technologies, Inc.

=============================================================================*/
#define __STDC_FORMAT_MACROS
#include <common/lowi_utils.h>
#include <inc/lowi_scan_measurement.h>

using namespace qc_loc_fw;
char const * LOWIUtils::to_string(LOWIRequest::eRequestType a)
{
  switch( a )
  {
    TAGCONST2STR(LOWIRequest,DISCOVERY_SCAN);
    TAGCONST2STR(LOWIRequest,RANGING_SCAN);
    TAGCONST2STR(LOWIRequest,CAPABILITY);
    TAGCONST2STR(LOWIRequest,RESET_CACHE);
    TAGCONST2STR(LOWIRequest,ASYNC_DISCOVERY_SCAN_RESULTS);
    TAGCONST2STR(LOWIRequest,PERIODIC_RANGING_SCAN);
    TAGCONST2STR(LOWIRequest,CANCEL_RANGING_SCAN);
    TAGCONST2STR(LOWIRequest,BGSCAN_CAPABILITIES);
    TAGCONST2STR(LOWIRequest,BGSCAN_CHANNELS_SUPPORTED);
    TAGCONST2STR(LOWIRequest,BGSCAN_START);
    TAGCONST2STR(LOWIRequest,BGSCAN_STOP);
    TAGCONST2STR(LOWIRequest,BGSCAN_CACHED_RESULTS);
    TAGCONST2STR(LOWIRequest,HOTLIST_SET);
    TAGCONST2STR(LOWIRequest,HOTLIST_CLEAR);
    TAGCONST2STR(LOWIRequest,SIGNIFINCANT_CHANGE_LIST_SET);
    TAGCONST2STR(LOWIRequest,SIGNIFINCANT_CHANGE_LIST_CLEAR);
    TAGCONST2STR(LOWIRequest,BATCHING_START);
    TAGCONST2STR(LOWIRequest,BATCHING_STOP);
    TAGCONST2STR(LOWIRequest,BATCHING_CACHED_RESULTS);
    TAGCONST2STR(LOWIRequest,CAPABILITY_SUBSCRIPTION);
    TAGCONST2STR(LOWIRequest,SET_LCI_INFORMATION);
    TAGCONST2STR(LOWIRequest,NEIGHBOR_REPORT);
    TAGCONST2STR(LOWIRequest,SET_LCR_INFORMATION);
    TAGCONST2STR(LOWIRequest,LOCATION_ANQP);
    TAGCONST2STR(LOWIRequest,LOWI_INTERNAL_MESSAGE);
    TAGCONST2STR(LOWIRequest,LOWI_RTT_RM_CHANNEL_REQUEST);
    TAGCONST2STR(LOWIRequest,LOWI_ENABLE_RESPONDER_REQUEST);
    TAGCONST2STR(LOWIRequest,LOWI_DISABLE_RESPONDER_REQUEST);
    TAGCONST2STR(LOWIRequest,LOWI_START_RESPONDER_MEAS_REQUEST);
    TAGCONST2STR(LOWIRequest,LOWI_STOP_RESPONDER_MEAS_REQUEST);
    TAGCONST2STR(LOWIRequest,LOWI_WLAN_STATE_QUERY_REQUEST);
    default: return "Unknown request";
  }
}

char const * LOWIUtils::to_string(LOWIResponse::eResponseType a)
{
  switch( a )
  {
    TAGCONST2STR(LOWIResponse,RESPONSE_TYPE_UNKNOWN);
    TAGCONST2STR(LOWIResponse,DISCOVERY_SCAN);
    TAGCONST2STR(LOWIResponse,RANGING_SCAN);
    TAGCONST2STR(LOWIResponse,CAPABILITY);
    TAGCONST2STR(LOWIResponse,RESET_CACHE);
    TAGCONST2STR(LOWIResponse,ASYNC_DISCOVERY_SCAN_RESULTS);
    TAGCONST2STR(LOWIResponse,LOWI_STATUS);
    TAGCONST2STR(LOWIResponse,BGSCAN_CAPABILITIES);
    TAGCONST2STR(LOWIResponse,BGSCAN_CHANNELS_SUPPORTED);
    TAGCONST2STR(LOWIResponse,BGSCAN_EVENT);
    TAGCONST2STR(LOWIResponse,BGSCAN_CACHED_RESULTS);
    TAGCONST2STR(LOWIResponse,HOTLIST_AP_EVENT);
    TAGCONST2STR(LOWIResponse,SIGNIFICANT_CHANGE_EVENT);
    TAGCONST2STR(LOWIResponse,CAPABILITY_SUBSCRIPTION);
    TAGCONST2STR(LOWIResponse,BGSCAN_CACHED_RESULTS_VECTOR);
    TAGCONST2STR(LOWIResponse,LOWI_RTT_RM_CHANNEL_RESPONSE);
    TAGCONST2STR(LOWIResponse,LOWI_WLAN_STATE_QUERY_RESPONSE);
    default: return "Unknown response";
  }
}

char const* LOWIUtils::to_string(LOWIResponse::eScanStatus a)
{
  switch( a )
  {
    TAGCONST2STR(LOWIResponse,SCAN_STATUS_SUCCESS);
    TAGCONST2STR(LOWIResponse,SCAN_STATUS_BUSY);
    TAGCONST2STR(LOWIResponse,SCAN_STATUS_DRIVER_ERROR);
    TAGCONST2STR(LOWIResponse,SCAN_STATUS_DRIVER_TIMEOUT);
    TAGCONST2STR(LOWIResponse,SCAN_STATUS_INTERNAL_ERROR);
    TAGCONST2STR(LOWIResponse,SCAN_STATUS_INVALID_REQ);
    TAGCONST2STR(LOWIResponse,SCAN_STATUS_NOT_SUPPORTED);
    TAGCONST2STR(LOWIResponse,SCAN_STATUS_NO_WIFI);
    TAGCONST2STR(LOWIResponse,SCAN_STATUS_TOO_MANY_REQUESTS);
    TAGCONST2STR(LOWIResponse,SCAN_STATUS_OUT_OF_MEMORY);
    default: return "SCAN_STATUS_UNKNOWN";
  }
}

char const* LOWIUtils::to_string(eLOWIPhyMode a)
{
  switch ( a )
  {
    CONST2STR(LOWI_PHY_MODE_UNKNOWN);
    CONST2STR(LOWI_PHY_MODE_11A);
    CONST2STR(LOWI_PHY_MODE_11G);
    CONST2STR(LOWI_PHY_MODE_11B);
    CONST2STR(LOWI_PHY_MODE_11GONLY);
    CONST2STR(LOWI_PHY_MODE_11NA_HT20);
    CONST2STR(LOWI_PHY_MODE_11NG_HT20);
    CONST2STR(LOWI_PHY_MODE_11NA_HT40);
    CONST2STR(LOWI_PHY_MODE_11NG_HT40);
    CONST2STR(LOWI_PHY_MODE_11AC_VHT20);
    CONST2STR(LOWI_PHY_MODE_11AC_VHT40);
    CONST2STR(LOWI_PHY_MODE_11AC_VHT80);
    CONST2STR(LOWI_PHY_MODE_11AC_VHT20_2G);
    CONST2STR(LOWI_PHY_MODE_11AC_VHT40_2G);
    CONST2STR(LOWI_PHY_MODE_11AC_VHT80_2G);
    CONST2STR(LOWI_PHY_MODE_11AC_VHT80_80);
    CONST2STR(LOWI_PHY_MODE_11AC_VHT160);
    CONST2STR(LOWI_PHY_MODE_11AX_HE20);
    CONST2STR(LOWI_PHY_MODE_11AX_HE40);
    CONST2STR(LOWI_PHY_MODE_11AX_HE80);
    CONST2STR(LOWI_PHY_MODE_11AX_HE80_80);
    CONST2STR(LOWI_PHY_MODE_11AX_HE160);
    CONST2STR(LOWI_PHY_MODE_11AX_HE20_2G);
    CONST2STR(LOWI_PHY_MODE_11AX_HE40_2G);
    CONST2STR(LOWI_PHY_MODE_11AX_HE80_2G);
    default: return "LOWI_PHY_MODE_UNEXPECTED";
  }
}

char const * LOWIUtils::to_string(eRangingBandwidth a)
{

  switch ( a)
  {
    CONST2STR(BW_20MHZ);
    CONST2STR(BW_40MHZ);
    CONST2STR(BW_80MHZ);
    CONST2STR(BW_160MHZ);
    CONST2STR(BW_MAX);
    default: return "BW_UNKNOWN";
  }
}

char const * LOWIUtils::to_string(eRttReportType a)
{
  switch ( a )
  {
    CONST2STR(RTT_REPORT_1_FRAME_CFR);
    CONST2STR(RTT_REPORT_1_FRAME_NO_CFR);
    CONST2STR(RTT_REPORT_AGGREGATE);
    case RTT_REPORT_BSSID:
    default: return "UNKNOWN Report Type";
  }
}

char const* LOWIUtils::to_string(eRangingPreamble a)
{
  switch ( a )
  {
    CONST2STR(RTT_PREAMBLE_LEGACY);
    CONST2STR(RTT_PREAMBLE_HT);
    CONST2STR(RTT_PREAMBLE_VHT);
    case RTT_PREAMBLE_MAX:
    default: return "UNKNOWN Preamble Type";
  }
}

char const* LOWIUtils::to_string(LOWIScanMeasurement::ePeerOEM a)
{
  switch ( a )
  {
    TAGCONST2STR(LOWIScanMeasurement,LOWI_PEER_OEM_UNKNOWN);
    TAGCONST2STR(LOWIScanMeasurement,LOWI_PEER_OEM_QTI);
    default: return "UNKNOWN OEM Peer Type";
  }
}

char const* LOWIUtils::to_string(LOWIScanMeasurement::eEncryptionType a)
{
  switch ( a )
  {
    TAGCONST2STR(LOWIScanMeasurement,LOWI_ENCRYPTION_TYPE_UNKNOWN );
    TAGCONST2STR(LOWIScanMeasurement,LOWI_ENCRYPTION_TYPE_OPEN );
    TAGCONST2STR(LOWIScanMeasurement,LOWI_ENCRYPTION_TYPE_WEP );
    TAGCONST2STR(LOWIScanMeasurement,LOWI_ENCRYPTION_TYPE_WPA_PSK );
    TAGCONST2STR(LOWIScanMeasurement,LOWI_ENCRYPTION_TYPE_WPA_EAP );
    default: return "UNKNOWN Encryption Type";
  }
}

char const * LOWIUtils::to_string(size_t val, const char * arr[], size_t arr_size)
{
  static const char LOWI_UNKNOWN_STR[] = "Unknown";
  return (val < arr_size ? arr[val] : LOWI_UNKNOWN_STR);
}


