/*====*====*====*====*====*====*====*====*====*====*====*====*====*====*====*

        LOWI Utils

GENERAL DESCRIPTION
  This file contains the implementation of Strings used in LOWI Logs

Copyright (c) 2016-2019 Qualcomm Technologies, Inc.
All Rights Reserved.
Confidential and Proprietary - Qualcomm Technologies, Inc.

=============================================================================*/
#define __STDC_FORMAT_MACROS
#include <base_util/log.h>

#include "lowi_strings.h"
#include <inc/lowi_scan_measurement.h>
#include <rttm.h>
#include <common/lowi_utils.h>

using namespace qc_loc_fw;

char const * LOWIStrings::rtt_preamble_type_to_string(uint8 a)
{
  switch( a )
  {
    CONST2STR(ROME_PREAMBLE_LEGACY);
    CONST2STR(ROME_PREAMBLE_CCK);
    CONST2STR(ROME_PREAMBLE_HT);
    CONST2STR(ROME_PREAMBLE_VHT);
    default: return "Unknown Preamble Type";
  }
}

char const * LOWIStrings::rtt_pkt_type_to_string(uint8 a)
{
  switch( a )
  {
    CONST2STR(RTT_MEAS_FRAME_NULL);
    CONST2STR(RTT_MEAS_FRAME_QOSNULL);
    CONST2STR(RTT_MEAS_FRAME_TMR);
    default: return "Unknown Packet Type";
  }
}

char const * LOWIStrings::to_string(WMIRTT_OEM_MSG_SUBTYPE a)
{
  switch( a )
  {
    CONST2STR(RTT_MSG_SUBTYPE_INVALID);
    CONST2STR(RTT_MSG_SUBTYPE_CAPABILITY_REQ);
    CONST2STR(RTT_MSG_SUBTYPE_CAPABILITY_RSP);
    CONST2STR(RTT_MSG_SUBTYPE_MEASUREMENT_REQ);
    CONST2STR(RTT_MSG_SUBTYPE_MEASUREMENT_RSP);
    CONST2STR(RTT_MSG_SUBTYPE_ERROR_REPORT_RSP);
    CONST2STR(RTT_MSG_SUBTYPE_CONFIGURE_LCR);
    CONST2STR(RTT_MSG_SUBTYPE_CONFIGURE_LCI);
    CONST2STR(RTT_MSG_SUBTYPE_CLEANUP_REQ);
    CONST2STR(RTT_MSG_SUBTYPE_CLEANUP_RSP);
    CONST2STR(RTT_MSG_SUBTYPE_GET_CHANNEL_INFO_REQ);
    CONST2STR(RTT_MSG_SUBTYPE_GET_CHANNEL_INFO_RSP);
    CONST2STR(RTT_MSG_SUBTYPE_CFG_RESPONDER_MODE_REQ);
    CONST2STR(RTT_MSG_SUBTYPE_CFG_RESPONDER_MODE_RSP);
    CONST2STR(RTT_MSG_SUBTYPE_CANCEL_MEASUREMENT_REQ);
    CONST2STR(RTT_MSG_SUBTYPE_CANCEL_MEASUREMENT_RSP);
    CONST2STR(RTT_MSG_SUBTYPE_CFG_RESPONDER_MEASUREMENT_REQ);
    CONST2STR(RTT_MSG_SUBTYPE_CFG_RESPONDER_MEASUREMENT_RSP);
    CONST2STR(RTT_MSG_SUBTYPE_RESPONDER_MEASUREMENT_RSP);
    default: return "Unknown CLD Msg Type";
  }
}

char const* LOWIStrings::cld_ani_msg_type_to_string(uint8 a)
{
  switch (a)
  {
    CONST2STR(ANI_MSG_APP_REG_REQ);
    CONST2STR(ANI_MSG_APP_REG_RSP);
    CONST2STR(ANI_MSG_OEM_DATA_REQ);
    CONST2STR(ANI_MSG_OEM_DATA_RSP);
    CONST2STR(ANI_MSG_CHANNEL_INFO_REQ);
    CONST2STR(ANI_MSG_CHANNEL_INFO_RSP);
    CONST2STR(ANI_MSG_OEM_ERROR);
    CONST2STR(ANI_MSG_PEER_STATUS_IND);
    case ANI_MSG_UNKNOWN:
    default: return "ANI_MSG_UNKNOWN";
  }
}

char const * LOWIStrings::to_string(RomeNlMsgType a)
{
  switch (a)
  {
    CONST2STR(ROME_REG_RSP_MSG);
    CONST2STR(ROME_CHANNEL_INFO_MSG);
    CONST2STR(ROME_P2P_PEER_EVENT_MSG);
    CONST2STR(ROME_CLD_ERROR_MSG);
    CONST2STR(ROME_RANGING_CAP_MSG);
    CONST2STR(ROME_RANGING_MEAS_MSG);
    CONST2STR(ROME_RANGING_ERROR_MSG);
    CONST2STR(ROME_RTT_CHANNEL_INFO_MSG);
    CONST2STR(ROME_RESPONDER_INFO_MSG);
    CONST2STR(ROME_CFG_RESPONDER_MEAS_RSP_MSG);
    CONST2STR(ROME_RESPONDER_MEAS_INFO_MSG);
    CONST2STR(ROME_FTM_SESSION_DONE_MSG);
    CONST2STR(ROME_NL_ERROR_MSG);
    case ROME_MSG_MAX:
    default: return "ROME_MSG_MAX";
  }
}

char const * LOWIStrings::to_string(WMI_RTT_STATUS_INDICATOR a)
{
  switch ( a )
  {
    CONST2STR(RTT_COMMAND_HEADER_ERROR);
    CONST2STR(RTT_COMMAND_ERROR);
    CONST2STR(RTT_MODULE_BUSY);
    CONST2STR(RTT_TOO_MANY_STA);
    CONST2STR(RTT_NO_RESOURCE);
    CONST2STR(RTT_VDEV_ERROR);
    CONST2STR(RTT_TRANSIMISSION_ERROR);
    CONST2STR(RTT_TM_TIMER_EXPIRE);
    CONST2STR(RTT_FRAME_TYPE_NOSUPPORT);
    CONST2STR(RTT_TIMER_EXPIRE);
    CONST2STR(RTT_CHAN_SWITCH_ERROR);
    CONST2STR(RTT_TMR_TRANS_ERROR);
    CONST2STR(RTT_NO_REPORT_BAD_CFR_TOKEN);
    CONST2STR(RTT_NO_REPORT_FIRST_TM_BAD_CFR);
    CONST2STR(RTT_REPORT_TYPE2_MIX);
    CONST2STR(RTT_REPORT_TYPE3_MIX);
    CONST2STR(RTT_LCI_CFG_OK);
    CONST2STR(RTT_LCR_CFG_OK);
    CONST2STR(RTT_CFG_ERROR);
    CONST2STR(RTT_STATUS_SUCCESS);
    CONST2STR(RTT_UNKNOWN_REPORT_TYPE);
    CONST2STR(RTT_TOO_MANY_CHAN_CONFIG);
    CONST2STR(RTT_DUPLICATE_REQ_ID);
    CONST2STR(RTT_TOO_MANY_MULTIBURST_SESSIONS);
    CONST2STR(RTT_MULTIBUST_INVALID_REPORT_TYPE);
    CONST2STR(RTT_CFG_RESPONDER_MODE_FAIL);
    CONST2STR(RTT_CFG_RESPONDER_MODE_SUCCESS);
#ifndef LOWI_ON_ACCESS_POINT
    CONST2STR(RTT_DFS_CHANNEL_QUIET);
    CONST2STR(RTT_VOIP_IN_PROGRESS);
    CONST2STR(RTT_LCI_REQ_OK);
    CONST2STR(RTT_FTMRR_OK);
    CONST2STR(RTT_NAN_REQUEST_FAILURE);
    CONST2STR(RTT_NAN_NEGOTIATION_FAILURE);
    CONST2STR(RTT_NAN_DATA_PATH_ACTIVE);
#else
    CONST2STR(RTT_LCI_REQ_OK);
    CONST2STR(RTT_FTMRR_OK);
    CONST2STR(RTT_DFS_CHANNEL_QUIET);
    CONST2STR(RTT_VOIP_IN_PROGRESS);
    CONST2STR(RTT_NAN_REQUEST_FAILURE);
    CONST2STR(RTT_NAN_NEGOTIATION_FAILURE);
    CONST2STR(RTT_NAN_DATA_PATH_ACTIVE);
#endif
    case WMI_RTT_REJECT_MAX:
    default: return "WMI_RTT_REJECT_MAX";
  }
}

char const * LOWIStrings::to_string(peer_status_t a)
{
  switch ( a )
  {
    CONST2STR(PEER_STATUS_CONNECTED);
    CONST2STR(PEER_STATUS_DISCONNECTED);
    CONST2STR(PEER_STATUS_UNDEF);
    default: return "Unknown P2P status";
  }
}

char const * LOWIStrings::to_string(p2p_peer_cap_t a)
{
  switch ( a )
  {
    CONST2STR(P2P_PEER_CAP_RTT2);
    CONST2STR(P2P_PEER_CAP_RTT3);
    CONST2STR(P2P_PEER_CAP_UNDEF);
    default: return "Unknown P2P Capability";
  }
}

char const * LOWIStrings::to_string(RangingFSM_Event a)
{
  switch ( a )
  {
    CONST2STR(EVENT_START_THREAD);
    CONST2STR(EVENT_RANGING_REQ);
    CONST2STR(EVENT_CONFIGURATION_REQ);
    CONST2STR(EVENT_INVALID_REQ);
    CONST2STR(EVENT_TERMINATE_REQ);
    CONST2STR(EVENT_REGISTRATION_SUCCESS);
    CONST2STR(EVENT_RANGING_CAP_INFO);
    CONST2STR(EVENT_CHANNEL_INFO);
    CONST2STR(EVENT_RANGING_MEAS_RECV);
    CONST2STR(EVENT_RANGING_ERROR);
    CONST2STR(EVENT_P2P_STATUS_UPDATE);
    CONST2STR(EVENT_CLD_ERROR_MESSAGE);
    CONST2STR(EVENT_INVALID_NL_MESSAGE);
    CONST2STR(EVENT_REGISTRATION_FAILURE_OR_LOST);
    CONST2STR(EVENT_RANGING_RESPONSE_TO_USER);
    CONST2STR(EVENT_CONFIG_RESPONSE_TO_USER);
    CONST2STR(EVENT_NOT_READY);
    CONST2STR(EVENT_TIMEOUT);
    CONST2STR(EVENT_RTT_AVAILABLE_CHANNEL_INFO);
    CONST2STR(EVENT_RTT_AVAILABLE_CHANNEL_REQ);
    CONST2STR(EVENT_ENABLE_RESPONDER_REQ);
    CONST2STR(EVENT_DISABLE_RESPONDER_REQ);
    CONST2STR(EVENT_RESPONDER_CHANNEL_INFO);
    CONST2STR(EVENT_START_RESPONDER_MEAS_REQ);
    CONST2STR(EVENT_STOP_RESPONDER_MEAS_REQ);
    CONST2STR(EVENT_CFG_RESPONDER_MEAS_RSP);
    CONST2STR(EVENT_RESPONDER_MEAS_INFO);
    CONST2STR(EVENT_MAX);
    default: return "Unknown FSM Event";
  }
}

char const * LOWIStrings::to_string(RangingFSM_State a)
{
  switch ( a )
  {
    CONST2STR(STATE_IDLE_START);
    CONST2STR(STATE_WAITING_FOR_WIPHY_INFO);
    CONST2STR(STATE_WAITING_FOR_RANGING_CAP);
    CONST2STR(STATE_READY_AND_IDLE);
    CONST2STR(STATE_PROCESSING_RANGING_REQ);
    CONST2STR(STATE_PROCESSING_CONFIG_REQ);
    CONST2STR(STATE_WAITING_FOR_RTT_CHANNEL_INFO);
    CONST2STR(STATE_PROCESSING_RESPONDER_CONFIG_REQ);
    CONST2STR(STATE_PROCESSING_RESPONDER_MEAS_INFO);
    CONST2STR(STATE_MAX);
    default: return "Unknown FSM State";
  }
}

char const * LOWIStrings::to_string(eRttType a)
{
  switch ( a )
  {
    CONST2STR(RTT1_RANGING);
    CONST2STR(RTT2_RANGING);
    CONST2STR(RTT3_RANGING);
    CONST2STR(BEST_EFFORT_RANGING);
    default: return "Unknown RTT type";
  }
}

char const * LOWIStrings::to_string(eNodeType a)
{
  switch ( a )
  {
    CONST2STR(NODE_TYPE_UNKNOWN);
    CONST2STR(ACCESS_POINT);
    CONST2STR(PEER_DEVICE);
    CONST2STR(NAN_DEVICE);
    CONST2STR(STA_DEVICE);
    CONST2STR(SOFT_AP);
    default: return "Unknown node type";
  }
}

char const* LOWIStrings::to_string(eRequestStatus a)
{
  switch ( a )
  {
  CONST2STR(SUCCESS);
  CONST2STR(NO_WIFI);
  CONST2STR(NOT_SUPPORTED);
  CONST2STR(INTERNAL_ERROR);
  CONST2STR(NO_WIGIG);
  default: return "Unknown Req Status";
  }
}

