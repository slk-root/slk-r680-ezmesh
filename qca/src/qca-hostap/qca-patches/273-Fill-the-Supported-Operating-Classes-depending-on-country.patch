diff --git a/src/common/ieee802_11_common.c b/src/common/ieee802_11_common.c
index 82b0eac..f73329b 100644
--- a/src/common/ieee802_11_common.c
+++ b/src/common/ieee802_11_common.c
@@ -16,6 +16,107 @@
 #include "ieee802_11_defs.h"
 #include "ieee802_11_common.h"
 
+struct country_op_class us_op_class[] = {
+        { 1, 115 },
+        { 2, 118 },
+        { 3, 124 },
+        { 4, 121 },
+        { 5, 125 },
+        { 6, 103 },
+        { 7, 103 },
+        { 8, 102 },
+        { 9, 102 },
+        { 10, 101},
+        { 11, 101},
+        { 12, 81 },
+        { 13, 94 },
+        { 14, 95 },
+        { 15, 96 },
+        { 22, 116 },
+        { 23, 119 },
+        { 24, 122 },
+        { 25, 126 },
+        { 26, 126 },
+        { 27, 117 },
+        { 28, 120 },
+        { 29, 123 },
+        { 30, 127 },
+        { 31, 127 },
+        { 32, 83 },
+        { 33, 84 },
+        { 34, 180 },
+        { 128, 128},
+        { 129, 129},
+        { 130, 130},
+};
+
+struct country_op_class eu_op_class[] = {
+        { 1, 115 },
+        { 2, 118 },
+        { 3, 121 },
+        { 4, 81 },
+        { 5, 116 },
+        { 6, 119 },
+        { 7, 122 },
+        { 8, 117 },
+        { 9, 120 },
+        { 10, 123 },
+        { 11, 83 },
+        { 12, 84 },
+        { 17, 125 },
+        { 18, 180 },
+        { 128, 128 },
+        { 129, 129 },
+        { 130, 130 },
+};
+
+/*Note: To be updated as per latest standard */
+struct country_op_class jp_op_class[] = {
+        { 1, 115 },
+        { 30, 81 },
+        { 31, 82 },
+        { 32, 118 },
+        { 33, 118 },
+        { 34, 121 },
+        { 35, 121 },
+        { 36, 116 },
+        { 37, 119 },
+        { 38, 119 },
+        { 39, 122 },
+        { 40, 122 },
+        { 41, 117 },
+        { 42, 120 },
+        { 43, 120 },
+        { 44, 123 },
+        { 45, 123 },
+        { 56, 83 },
+        { 57, 84 },
+        { 58, 121 },
+        { 59, 180 },
+        { 128, 128 },
+        { 129, 129 },
+        { 130, 130 },
+};
+
+struct country_op_class cn_op_class[] = {
+        { 1, 115 },
+        { 2, 118 },
+        { 3, 125 },
+        { 4, 116 },
+        { 5, 119 },
+        { 6, 126 },
+        { 7, 81 },
+        { 8, 83 },
+        { 9, 84 },
+        { 128, 128 },
+        { 129, 129 },
+        { 130, 130 },
+};
+
+size_t us_op_class_size = ARRAY_SIZE(us_op_class);
+size_t eu_op_class_size = ARRAY_SIZE(eu_op_class);
+size_t jp_op_class_size = ARRAY_SIZE(jp_op_class);
+size_t cn_op_class_size = ARRAY_SIZE(cn_op_class);
 
 static int ieee802_11_parse_vendor_specific(const u8 *pos, size_t elen,
 					    struct ieee802_11_elems *elems,
@@ -1133,28 +1234,7 @@ int ieee80211_chaninfo_to_channel(unsigned int freq, enum chan_width chanwidth,
 	return 0;
 }
 
-
-static const char *const us_op_class_cc[] = {
-	"US", "CA", NULL
-};
-
-static const char *const eu_op_class_cc[] = {
-	"AL", "AM", "AT", "AZ", "BA", "BE", "BG", "BY", "CH", "CY", "CZ", "DE",
-	"DK", "EE", "EL", "ES", "FI", "FR", "GE", "HR", "HU", "IE", "IS", "IT",
-	"LI", "LT", "LU", "LV", "MD", "ME", "MK", "MT", "NL", "NO", "PL", "PT",
-	"RO", "RS", "RU", "SE", "SI", "SK", "TR", "UA", "UK", NULL
-};
-
-static const char *const jp_op_class_cc[] = {
-	"JP", NULL
-};
-
-static const char *const cn_op_class_cc[] = {
-	"CN", NULL
-};
-
-
-static int country_match(const char *const cc[], const char *const country)
+int country_match(const char *const cc[], const char *const country)
 {
 	int i;
 
@@ -1867,6 +1947,12 @@ const struct oper_class_map global_op_class[] = {
 	{ HOSTAPD_MODE_IEEE80211A, 129, 50, 114, 16, BW160, P2P_SUPP },
 	{ HOSTAPD_MODE_IEEE80211A, 130, 36, 161, 4, BW80P80, P2P_SUPP },
 	{ HOSTAPD_MODE_IEEE80211A, 131, 1, 233, 4, BW20, P2P_SUPP },
+	{ HOSTAPD_MODE_IEEE80211A, 132, 3, 227, 8, BW40PLUS, P2P_SUPP },
+	{ HOSTAPD_MODE_IEEE80211A, 132, 3, 227, 8, BW40MINUS, P2P_SUPP },
+	{ HOSTAPD_MODE_IEEE80211A, 133, 7, 215, 16, BW80, P2P_SUPP },
+	{ HOSTAPD_MODE_IEEE80211A, 134, 15, 207, 32, BW160, P2P_SUPP },
+	{ HOSTAPD_MODE_IEEE80211A, 135, 7, 215, 16, BW80P80, P2P_SUPP },
+	{ HOSTAPD_MODE_IEEE80211A, 136, 2, 2, 4, BW20, P2P_SUPP },
 
 	/*
 	 * IEEE Std 802.11ad-2012 and P802.ay/D5.0 60 GHz operating classes.
@@ -2109,82 +2195,6 @@ size_t add_multi_ap_ie(u8 *buf, size_t len, struct multi_ap_params* multi_ap)
 	return pos - buf;
 }
 
-
-static const struct country_op_class us_op_class[] = {
-	{ 1, 115 },
-	{ 2, 118 },
-	{ 3, 124 },
-	{ 4, 121 },
-	{ 5, 125 },
-	{ 12, 81 },
-	{ 22, 116 },
-	{ 23, 119 },
-	{ 24, 122 },
-	{ 25, 126 },
-	{ 26, 126 },
-	{ 27, 117 },
-	{ 28, 120 },
-	{ 29, 123 },
-	{ 30, 127 },
-	{ 31, 127 },
-	{ 32, 83 },
-	{ 33, 84 },
-	{ 34, 180 },
-};
-
-static const struct country_op_class eu_op_class[] = {
-	{ 1, 115 },
-	{ 2, 118 },
-	{ 3, 121 },
-	{ 4, 81 },
-	{ 5, 116 },
-	{ 6, 119 },
-	{ 7, 122 },
-	{ 8, 117 },
-	{ 9, 120 },
-	{ 10, 123 },
-	{ 11, 83 },
-	{ 12, 84 },
-	{ 17, 125 },
-	{ 18, 180 },
-};
-
-static const struct country_op_class jp_op_class[] = {
-	{ 1, 115 },
-	{ 30, 81 },
-	{ 31, 82 },
-	{ 32, 118 },
-	{ 33, 118 },
-	{ 34, 121 },
-	{ 35, 121 },
-	{ 36, 116 },
-	{ 37, 119 },
-	{ 38, 119 },
-	{ 39, 122 },
-	{ 40, 122 },
-	{ 41, 117 },
-	{ 42, 120 },
-	{ 43, 120 },
-	{ 44, 123 },
-	{ 45, 123 },
-	{ 56, 83 },
-	{ 57, 84 },
-	{ 58, 121 },
-	{ 59, 180 },
-};
-
-static const struct country_op_class cn_op_class[] = {
-	{ 1, 115 },
-	{ 2, 118 },
-	{ 3, 125 },
-	{ 4, 116 },
-	{ 5, 119 },
-	{ 6, 126 },
-	{ 7, 81 },
-	{ 8, 83 },
-	{ 9, 84 },
-};
-
 static u8
 global_op_class_from_country_array(u8 op_class, size_t array_size,
 				   const struct country_op_class *country_array)
diff --git a/src/common/ieee802_11_common.h b/src/common/ieee802_11_common.h
index 95bf1fc..ca5283f 100644
--- a/src/common/ieee802_11_common.h
+++ b/src/common/ieee802_11_common.h
@@ -189,6 +189,44 @@ struct ieee802_11_elems {
 
 typedef enum { ParseOK = 0, ParseUnknown = 1, ParseFailed = -1 } ParseRes;
 
+struct country_op_class {
+	u8 country_op_class;
+	u8 global_op_class;
+};
+
+static const char *const us_op_class_cc[] = {
+	"US", "CA", NULL
+};
+
+static const char *const eu_op_class_cc[] = {
+	"AL", "AM", "AT", "AZ", "BA", "BE", "BG", "BY", "CH", "CY", "CZ", "DE",
+	"DK", "EE", "EL", "ES", "FI", "FR", "GE", "HR", "HU", "IE", "IS", "IT",
+	"LI", "LT", "LU", "LV", "MD", "ME", "MK", "MT", "NL", "NO", "PL", "PT",
+	"RO", "RS", "RU", "SE", "SI", "SK", "TR", "UA", "UK", NULL
+};
+
+static const char *const jp_op_class_cc[] = {
+	"JP", NULL
+};
+
+static const char *const cn_op_class_cc[] = {
+	"CN", NULL
+};
+
+extern struct country_op_class us_op_class[];
+
+extern struct country_op_class eu_op_class[];
+
+/*Note: To be updated as per latest standard */
+extern struct country_op_class jp_op_class[];
+
+extern struct country_op_class cn_op_class[];
+
+extern size_t us_op_class_size;
+extern size_t eu_op_class_size;
+extern size_t jp_op_class_size;
+extern size_t cn_op_class_size;
+
 ParseRes ieee802_11_parse_elems(const u8 *start, size_t len,
 				struct ieee802_11_elems *elems,
 				int show_errors);
@@ -222,6 +260,7 @@ int hostapd_config_tx_queue(struct hostapd_tx_queue_params queue[],
 			    const char *name, const char *val);
 enum hostapd_hw_mode ieee80211_freq_to_chan(int freq, u8 *channel);
 int ieee80211_chan_to_freq(const char *country, u8 op_class, u8 chan);
+int country_match(const char *const cc[], const char *const country);
 enum hostapd_hw_mode ieee80211_freq_to_channel_ext(unsigned int freq,
 						   int sec_channel, int vht,
 						   u8 *op_class, u8 *channel);
@@ -264,11 +303,6 @@ u16 check_multi_ap_ie(const u8 *multi_ap_ie, size_t multi_ap_len,
 				struct multi_ap_params* multi_ap);
 size_t add_multi_ap_ie(u8 *buf, size_t len, struct multi_ap_params* multi_ap);
 
-struct country_op_class {
-	u8 country_op_class;
-	u8 global_op_class;
-};
-
 u8 country_to_global_op_class(const char *country, u8 op_class);
 
 const struct oper_class_map * get_oper_class(const char *country, u8 op_class);
diff --git a/wpa_supplicant/op_classes.c b/wpa_supplicant/op_classes.c
index bd97fee..805231f 100644
--- a/wpa_supplicant/op_classes.c
+++ b/wpa_supplicant/op_classes.c
@@ -17,6 +17,13 @@
 #include "bss.h"
 
 
+static const u8 center_channels_80mhz_5G[] = { 42, 58, 106, 122, 138, 155 };
+static const u8 center_channels_80mhz_6G[] = { 7, 23, 39, 55, 71, 87, 103, 119,
+					       135, 151, 167, 183,199, 215 };
+static const u8 center_channels_160mhz_5G[] = { 50, 114 };
+static const u8 center_channels_160mhz_6G[] = { 15, 47, 79, 111, 143, 175,
+						207 };
+
 static enum chan_allowed allow_channel(struct hostapd_hw_modes *mode,
 				       u8 op_class, u8 chan,
 				       unsigned int *flags)
@@ -47,17 +54,27 @@ static enum chan_allowed allow_channel(struct hostapd_hw_modes *mode,
 }
 
 
-static int get_center_80mhz(struct hostapd_hw_modes *mode, u8 channel)
+static int get_center_80mhz(struct hostapd_hw_modes *mode, u8 channel,
+			    int is6ghz)
 {
-	u8 center_channels[] = { 42, 58, 106, 122, 138, 155 };
+	static const u8 *center_channels;
+	u8 num_channels;
 	size_t i;
 
+	if (is6ghz) {
+		center_channels = center_channels_80mhz_6G;
+		num_channels =  ARRAY_SIZE(center_channels_80mhz_6G);
+	} else {
+		center_channels = center_channels_80mhz_5G;
+		num_channels =  ARRAY_SIZE(center_channels_80mhz_5G);
+	}
+
 	if (mode->mode != HOSTAPD_MODE_IEEE80211A)
 		return 0;
 
-	for (i = 0; i < ARRAY_SIZE(center_channels); i++) {
+	for (i = 0; i < num_channels; i++) {
 		/*
-		 * In 80 MHz, the bandwidth "spans" 12 channels (e.g., 36-48),
+		 * In 80 MHz, the bandwidth "spans" 12 channels (e.g., 36-48)
 		 * so the center channel is 6 channels away from the start/end.
 		 */
 		if (channel >= center_channels[i] - 6 &&
@@ -75,8 +92,10 @@ static enum chan_allowed verify_80mhz(struct hostapd_hw_modes *mode,
 	u8 center_chan;
 	unsigned int i;
 	unsigned int no_ir = 0;
+	int is6ghz = op_class >= 131 && op_class <= 136;
+
+	center_chan = get_center_80mhz(mode, channel, is6ghz);
 
-	center_chan = get_center_80mhz(mode, channel);
 	if (!center_chan)
 		return NOT_ALLOWED;
 
@@ -89,11 +108,13 @@ static enum chan_allowed verify_80mhz(struct hostapd_hw_modes *mode,
 		    NOT_ALLOWED)
 			return NOT_ALLOWED;
 
-		if ((i == 0 && !(flags & HOSTAPD_CHAN_VHT_10_70)) ||
-		    (i == 1 && !(flags & HOSTAPD_CHAN_VHT_30_50)) ||
-		    (i == 2 && !(flags & HOSTAPD_CHAN_VHT_50_30)) ||
-		    (i == 3 && !(flags & HOSTAPD_CHAN_VHT_70_10)))
-			return NOT_ALLOWED;
+		if(!is6ghz) {
+			if ((i == 0 && !(flags & HOSTAPD_CHAN_VHT_10_70)) ||
+			    (i == 1 && !(flags & HOSTAPD_CHAN_VHT_30_50)) ||
+			    (i == 2 && !(flags & HOSTAPD_CHAN_VHT_50_30)) ||
+			    (i == 3 && !(flags & HOSTAPD_CHAN_VHT_70_10)))
+				return NOT_ALLOWED;
+		}
 
 		if (flags & HOSTAPD_CHAN_NO_IR)
 			no_ir = 1;
@@ -106,15 +127,25 @@ static enum chan_allowed verify_80mhz(struct hostapd_hw_modes *mode,
 }
 
 
-static int get_center_160mhz(struct hostapd_hw_modes *mode, u8 channel)
+static int get_center_160mhz(struct hostapd_hw_modes *mode, u8 channel,
+			     int is6ghz)
 {
-	u8 center_channels[] = { 50, 114 };
+	static const u8 *center_channels;
+	u8 num_channels;
 	unsigned int i;
 
+	if (is6ghz) {
+		center_channels = center_channels_160mhz_6G;
+		num_channels =  ARRAY_SIZE(center_channels_80mhz_6G);
+	} else {
+		center_channels = center_channels_160mhz_5G;
+		num_channels =  ARRAY_SIZE(center_channels_160mhz_5G);
+	}
+
 	if (mode->mode != HOSTAPD_MODE_IEEE80211A)
 		return 0;
 
-	for (i = 0; i < ARRAY_SIZE(center_channels); i++) {
+	for (i = 0; i < num_channels; i++) {
 		/*
 		 * In 160 MHz, the bandwidth "spans" 28 channels (e.g., 36-64),
 		 * so the center channel is 14 channels away from the start/end.
@@ -134,8 +165,10 @@ static enum chan_allowed verify_160mhz(struct hostapd_hw_modes *mode,
 	u8 center_chan;
 	unsigned int i;
 	unsigned int no_ir = 0;
+	int is6ghz = op_class >= 131 && op_class <= 136;
+
+	center_chan = get_center_160mhz(mode, channel, is6ghz);
 
-	center_chan = get_center_160mhz(mode, channel);
 	if (!center_chan)
 		return NOT_ALLOWED;
 
@@ -148,15 +181,17 @@ static enum chan_allowed verify_160mhz(struct hostapd_hw_modes *mode,
 		    NOT_ALLOWED)
 			return NOT_ALLOWED;
 
-		if ((i == 0 && !(flags & HOSTAPD_CHAN_VHT_10_150)) ||
-		    (i == 1 && !(flags & HOSTAPD_CHAN_VHT_30_130)) ||
-		    (i == 2 && !(flags & HOSTAPD_CHAN_VHT_50_110)) ||
-		    (i == 3 && !(flags & HOSTAPD_CHAN_VHT_70_90)) ||
-		    (i == 4 && !(flags & HOSTAPD_CHAN_VHT_90_70)) ||
-		    (i == 5 && !(flags & HOSTAPD_CHAN_VHT_110_50)) ||
-		    (i == 6 && !(flags & HOSTAPD_CHAN_VHT_130_30)) ||
-		    (i == 7 && !(flags & HOSTAPD_CHAN_VHT_150_10)))
-			return NOT_ALLOWED;
+		if(!is6ghz) {
+			if ((i == 0 && !(flags & HOSTAPD_CHAN_VHT_10_150)) ||
+			    (i == 1 && !(flags & HOSTAPD_CHAN_VHT_30_130)) ||
+			    (i == 2 && !(flags & HOSTAPD_CHAN_VHT_50_110)) ||
+			    (i == 3 && !(flags & HOSTAPD_CHAN_VHT_70_90)) ||
+			    (i == 4 && !(flags & HOSTAPD_CHAN_VHT_90_70)) ||
+			    (i == 5 && !(flags & HOSTAPD_CHAN_VHT_110_50)) ||
+			    (i == 6 && !(flags & HOSTAPD_CHAN_VHT_130_30)) ||
+			    (i == 7 && !(flags & HOSTAPD_CHAN_VHT_150_10)))
+				return NOT_ALLOWED;
+		}
 
 		if (flags & HOSTAPD_CHAN_NO_IR)
 			no_ir = 1;
@@ -168,20 +203,20 @@ static enum chan_allowed verify_160mhz(struct hostapd_hw_modes *mode,
 	return ALLOWED;
 }
 
-
 enum chan_allowed verify_channel(struct hostapd_hw_modes *mode, u8 op_class,
 				 u8 channel, u8 bw)
 {
 	unsigned int flag = 0;
 	enum chan_allowed res, res2;
+	int is6ghz = op_class >= 131 && op_class <= 136;
 
 	res2 = res = allow_channel(mode, op_class, channel, &flag);
 	if (bw == BW40MINUS) {
-		if (!(flag & HOSTAPD_CHAN_HT40MINUS))
+		if (!(flag & HOSTAPD_CHAN_HT40MINUS) && !is6ghz)
 			return NOT_ALLOWED;
 		res2 = allow_channel(mode, op_class, channel - 4, NULL);
 	} else if (bw == BW40PLUS) {
-		if (!(flag & HOSTAPD_CHAN_HT40PLUS))
+		if (!(flag & HOSTAPD_CHAN_HT40PLUS) && !is6ghz)
 			return NOT_ALLOWED;
 		res2 = allow_channel(mode, op_class, channel + 4, NULL);
 	} else if (bw == BW80) {
@@ -224,10 +259,11 @@ static int wpas_op_class_supported(struct wpa_supplicant *wpa_s,
 	int chan;
 	size_t i;
 	struct hostapd_hw_modes *mode;
-	int found;
+	int found = 0;
 	int z;
 	int freq2 = 0;
 	int freq5 = 0;
+	int freq6 = 0;
 
 	mode = get_mode(wpa_s->hw.modes, wpa_s->hw.num_modes, op_class->mode,
 			is_6ghz_op_class(op_class->op_class));
@@ -242,21 +278,25 @@ static int wpas_op_class_supported(struct wpa_supplicant *wpa_s,
 
 			if (f == 0)
 				break; /* end of list */
-			if (f > 4000 && f < 6000)
+			if (f > 4000 && f < 5935)
 				freq5 = 1;
 			else if (f > 2400 && f < 2500)
 				freq2 = 1;
+			else if (f >= 5935 && f <= 7115)
+				freq6 = 1;
 		}
 	} else {
 		/* No frequencies specified, can use anything hardware supports.
 		 */
-		freq2 = freq5 = 1;
+		freq2 = freq5 = freq6 = 1;
 	}
 
 	if (op_class->op_class >= 115 && op_class->op_class <= 130 && !freq5)
 		return 0;
 	if (op_class->op_class >= 81 && op_class->op_class <= 84 && !freq2)
 		return 0;
+	if (op_class->op_class >= 131 && op_class->op_class <= 136 && !freq6)
+		return 0;
 
 #ifdef CONFIG_HT_OVERRIDES
 	if (ssid && ssid->disable_ht) {
@@ -291,10 +331,19 @@ static int wpas_op_class_supported(struct wpa_supplicant *wpa_s,
 	}
 #endif /* CONFIG_VHT_OVERRIDES */
 
-	if (op_class->op_class == 128) {
-		u8 channels[] = { 42, 58, 106, 122, 138, 155 };
+	if (op_class->op_class == 128 || op_class->op_class == 133) {
+		static const u8 *channels;
+		u8 num_channels;
+
+		if (is_6ghz_op_class(op_class->op_class)) {
+			channels = center_channels_80mhz_6G;
+			num_channels = ARRAY_SIZE(center_channels_80mhz_6G);
+		} else {
+			channels = center_channels_80mhz_5G;
+			num_channels = ARRAY_SIZE(center_channels_80mhz_5G);
+		}
 
-		for (i = 0; i < ARRAY_SIZE(channels); i++) {
+		for (i = 0; i < num_channels; i++) {
 			if (verify_channel(mode, op_class->op_class,
 					   channels[i], op_class->bw) !=
 			    NOT_ALLOWED)
@@ -304,38 +353,61 @@ static int wpas_op_class_supported(struct wpa_supplicant *wpa_s,
 		return 0;
 	}
 
-	if (op_class->op_class == 129) {
-		/* Check if either 160 MHz channels is allowed */
-		return verify_channel(mode, op_class->op_class, 50,
-				      op_class->bw) != NOT_ALLOWED ||
-			verify_channel(mode, op_class->op_class, 114,
-				       op_class->bw) != NOT_ALLOWED;
+	if (op_class->op_class == 129 || op_class->op_class == 134) {
+		static const u8 *channels;
+		u8 num_channels;
+
+		if (is_6ghz_op_class(op_class->op_class)) {
+			channels = center_channels_160mhz_6G;
+			num_channels = ARRAY_SIZE(center_channels_160mhz_6G);
+		} else {
+			channels = center_channels_160mhz_5G;
+			num_channels = ARRAY_SIZE(center_channels_160mhz_5G);
+		}
+
+		/* Check if  160 MHz channels is allowed */
+		for (i = 0; i < num_channels; i++) {
+			if (verify_channel(mode, op_class->op_class,
+					   channels[i], op_class->bw) !=
+			    NOT_ALLOWED)
+				return 1;
+		}
+
+		return 0;
 	}
 
-	if (op_class->op_class == 130) {
-		/* Need at least two non-contiguous 80 MHz segments */
-		found = 0;
-
-		if (verify_channel(mode, op_class->op_class, 42,
-				   op_class->bw) != NOT_ALLOWED ||
-		    verify_channel(mode, op_class->op_class, 58,
-				   op_class->bw) != NOT_ALLOWED)
-			found++;
-		if (verify_channel(mode, op_class->op_class, 106,
-				   op_class->bw) != NOT_ALLOWED ||
-		    verify_channel(mode, op_class->op_class, 122,
-				   op_class->bw) != NOT_ALLOWED ||
-		    verify_channel(mode, op_class->op_class, 138,
-				   op_class->bw) != NOT_ALLOWED)
-			found++;
-		if (verify_channel(mode, op_class->op_class, 106,
-				   op_class->bw) != NOT_ALLOWED &&
-		    verify_channel(mode, op_class->op_class, 138,
-				   op_class->bw) != NOT_ALLOWED)
-			found++;
-		if (verify_channel(mode, op_class->op_class, 155,
-				   op_class->bw) != NOT_ALLOWED)
-			found++;
+	if (op_class->op_class == 130 || op_class->op_class == 135) {
+		static const u8 *channels;
+		u8 num_channels, chan_cen, cur_cen, next_cen;
+
+		if (is_6ghz_op_class(op_class->op_class)) {
+			channels = center_channels_80mhz_6G;
+			num_channels = ARRAY_SIZE(center_channels_80mhz_6G);
+		} else {
+			channels = center_channels_80mhz_5G;
+			num_channels = ARRAY_SIZE(center_channels_80mhz_5G);
+		}
+		/* if we found the first 80 then skip the next one, but need
+		 * to find one more
+		 */
+		for (i = 0; i < num_channels; i++) {
+			chan_cen = channels[i];
+			if (verify_channel(mode, op_class->op_class, chan_cen,
+					   op_class->bw) != NOT_ALLOWED) {
+				found++;
+				/* skip the next one if it is adjacent
+				 * while skipping make sure not to
+				 * accessing element beyond the end of the
+				 * array.
+				 */
+				if(i < num_channels - 1) {
+					cur_cen = chan_cen;
+					next_cen = channels[i+1];
+					if(next_cen == cur_cen + 16)
+						i = i + 1;
+				} /* End of   if(i<num_chan-1) */
+			} /* End of   if (verify_channel( */
+		}
 
 		if (found >= 2)
 			return 1;
@@ -343,9 +415,19 @@ static int wpas_op_class_supported(struct wpa_supplicant *wpa_s,
 		return 0;
 	}
 
-	found = 0;
 	for (chan = op_class->min_chan; chan <= op_class->max_chan;
 	     chan += op_class->inc) {
+		/* In case of 5G, the 40+and 40- channels are listed in the
+		 * opclass table  as primary channels, however, in case of
+		 * 6G, the center of 40+ or 40- channels are listed in the
+		 * opclass table.
+		 */
+		if (is_6ghz_op_class(op_class->op_class)) {
+			if (op_class->bw == BW40PLUS)
+				chan = chan - 2;
+			else if (op_class->bw == BW40MINUS)
+				chan = chan + 2;
+		}
 		if (verify_channel(mode, op_class->op_class, chan,
 				   op_class->bw) != NOT_ALLOWED) {
 			found = 1;
@@ -379,8 +461,13 @@ size_t wpas_supp_op_class_ie(struct wpa_supplicant *wpa_s,
 {
 	struct wpabuf *buf;
 	u8 op, current, chan;
+	char country[2];
+	struct country_op_class *country_array = NULL;
 	u8 *ie_len;
+	const u8 *country_ie;
 	size_t res;
+	size_t size = 0;
+	const struct oper_class_map *g_op_idx = NULL;
 
 	/*
 	 * Determine the current operating class correct mode based on
@@ -405,12 +492,50 @@ size_t wpas_supp_op_class_ie(struct wpa_supplicant *wpa_s,
 	/* Will set the length later, putting a placeholder */
 	ie_len = wpabuf_put(buf, 1);
 	wpabuf_put_u8(buf, current);
-
-	for (op = 0; global_op_class[op].op_class; op++) {
-		if (wpas_op_class_supported(wpa_s, ssid, &global_op_class[op]))
-			wpabuf_put_u8(buf, global_op_class[op].op_class);
+	country_ie = wpa_bss_get_ie(bss, WLAN_EID_COUNTRY);
+	if (country_ie) {
+		memcpy(country, country_ie + 2, 2);
+
+		if (country_match(us_op_class_cc, country)) {
+			country_array = us_op_class;
+			size = us_op_class_size;
+		} else if (country_match(eu_op_class_cc, country)) {
+			country_array = eu_op_class;
+			size = eu_op_class_size;
+		} else if (country_match(jp_op_class_cc, country)) {
+			country_array = jp_op_class;
+			size = jp_op_class_size;
+		} else if (country_match(cn_op_class_cc, country)) {
+			country_array = cn_op_class;
+			size = cn_op_class_size;
+		}
 	}
 
+	/*
+	 * For 6G channels use global operating class table.
+	 * For non-6G use country specific operating class table.
+	 * For countries not in the list of countries, use global
+	 * operating class table.
+	 */
+#define SIXG_FIRST_CFREQ 5935
+	if (country_array && bss->freq < SIXG_FIRST_CFREQ) {
+		for (op = 0; op < size; op++) {
+			g_op_idx = get_oper_class(country,
+					country_array[op].country_op_class);
+			if (g_op_idx &&  wpas_op_class_supported(wpa_s, ssid,
+						    g_op_idx)) {
+				wpabuf_put_u8(buf,
+					      country_array[op].global_op_class);
+			}
+		}
+	} else {
+		for (op = 0; global_op_class[op].op_class; op++) {
+		     if (wpas_op_class_supported(wpa_s, ssid,
+					      &global_op_class[op])) {
+			  wpabuf_put_u8(buf, global_op_class[op].op_class);
+		     }
+		}
+	}
 	*ie_len = wpabuf_len(buf) - 2;
 	if (*ie_len < 2 || wpabuf_len(buf) > len) {
 		wpa_printf(MSG_ERROR,
