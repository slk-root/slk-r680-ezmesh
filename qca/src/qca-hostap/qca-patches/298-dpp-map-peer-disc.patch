diff --git a/hostapd/config_file.c b/hostapd/config_file.c
index dbcb84d..2c78329 100644
--- a/hostapd/config_file.c
+++ b/hostapd/config_file.c
@@ -4395,6 +4395,9 @@ static int hostapd_config_fill(struct hostapd_config *conf,
 	} else if (os_strcmp(buf, "dpp_connector") == 0) {
 		os_free(bss->dpp_connector);
 		bss->dpp_connector = os_strdup(pos);
+	} else if (os_strcmp(buf, "dpp_1905_connector") == 0) {
+		os_free(bss->dpp_1905_connector);
+		bss->dpp_1905_connector = os_strdup(pos);
 	} else if (os_strcmp(buf, "dpp_netaccesskey") == 0) {
 		if (parse_wpabuf_hex(line, buf, &bss->dpp_netaccesskey, pos))
 			return 1;
diff --git a/hostapd/ctrl_iface.c b/hostapd/ctrl_iface.c
index 5b71a7b..65f05ed 100644
--- a/hostapd/ctrl_iface.c
+++ b/hostapd/ctrl_iface.c
@@ -3781,6 +3781,13 @@ static int hostapd_ctrl_iface_receive_process(struct hostapd_data *hapd,
 			reply_len = -1;
 	} else if (os_strcmp(buf, "DPP_STOP_CHIRP") == 0) {
 		hostapd_dpp_chirp_stop(hapd);
+	} else if (os_strncmp(buf, "DPP_MAP_PEER_DISC_START ", 23) == 0) {
+		if (hapd->conf->dpp_1905_connector &&
+		    dpp_map_peer_disc_start(hapd->conf->dpp_1905_connector,
+					    hapd->iface->interfaces->dpp,
+					    hapd->msg_ctx, hapd,
+					    buf + 23) < 0)
+			reply_len = -1;
 #endif /* CONFIG_DPP2 */
 #endif /* CONFIG_DPP */
 #ifdef RADIUS_SERVER
diff --git a/hostapd/hostapd_cli.c b/hostapd/hostapd_cli.c
index e3b7226..ee1504c 100644
--- a/hostapd/hostapd_cli.c
+++ b/hostapd/hostapd_cli.c
@@ -1515,6 +1515,14 @@ static int hostapd_cli_cmd_dpp_stop_chirp(struct wpa_ctrl *ctrl, int argc,
 	return wpa_ctrl_command(ctrl, "DPP_STOP_CHIRP");
 }
 
+
+static int hostapd_cli_cmd_dpp_map_peer_disc_start(struct wpa_ctrl *ctrl,
+						   int argc,
+						   char *argv[])
+{
+	return hostapd_cli_cmd(ctrl, "DPP_MAP_PEER_DISC_START", 1, argc, argv);
+}
+
 #endif /* CONFIG_DPP2 */
 #endif /* CONFIG_DPP */
 
@@ -1735,6 +1743,9 @@ static const struct hostapd_cli_cmd hostapd_cli_commands[] = {
 	  "own=<BI ID> iter=<count> = start DPP chirp" },
 	{ "dpp_stop_chirp", hostapd_cli_cmd_dpp_stop_chirp, NULL,
 	  "= stop DPP chirp" },
+	{ "dpp_map_peer_disc_start", hostapd_cli_cmd_dpp_map_peer_disc_start,
+	  NULL,
+	  "= start MAP peer disc" },
 #endif /* CONFIG_DPP2 */
 #endif /* CONFIG_DPP */
 	{ "accept_acl", hostapd_cli_cmd_accept_macacl, NULL,
diff --git a/hostapd/main.c b/hostapd/main.c
index 64ce41a..731b5e8 100644
--- a/hostapd/main.c
+++ b/hostapd/main.c
@@ -704,6 +704,7 @@ int main(int argc, char *argv[])
 #ifdef CONFIG_DPP2
 	dpp_conf.remove_bi = hostapd_dpp_remove_bi;
 	dpp_conf.get_dpp_map_flag = hostapd_dpp_get_map_flag;
+	dpp_conf.dpp_map_peer_disc_auth = hostapd_dpp_map_peer_disc_auth;
 #endif /* CONFIG_DPP2 */
 	interfaces.dpp = dpp_global_init(&dpp_conf);
 	if (!interfaces.dpp)
diff --git a/src/ap/ap_config.c b/src/ap/ap_config.c
index e52759d..58fa210 100644
--- a/src/ap/ap_config.c
+++ b/src/ap/ap_config.c
@@ -940,6 +940,7 @@ void hostapd_config_free_bss(struct hostapd_bss_config *conf)
 	os_free(conf->dpp_name);
 	os_free(conf->dpp_mud_url);
 	os_free(conf->dpp_connector);
+	os_free(conf->dpp_1905_connector);
 	wpabuf_free(conf->dpp_netaccesskey);
 	wpabuf_free(conf->dpp_csign);
 #ifdef CONFIG_DPP2
diff --git a/src/ap/ap_config.h b/src/ap/ap_config.h
index 4c3290f..950dbde 100644
--- a/src/ap/ap_config.h
+++ b/src/ap/ap_config.h
@@ -744,6 +744,7 @@ struct hostapd_bss_config {
 	unsigned int dpp_netaccesskey_expiry;
 	struct wpabuf *dpp_csign;
 	int dpp_map;
+	char *dpp_1905_connector;
 #ifdef CONFIG_DPP2
 	struct dpp_controller_conf *dpp_controller;
 	int dpp_configurator_connectivity;
diff --git a/src/ap/dpp_hostapd.c b/src/ap/dpp_hostapd.c
index c3917c0..336ce0f 100644
--- a/src/ap/dpp_hostapd.c
+++ b/src/ap/dpp_hostapd.c
@@ -564,6 +564,12 @@ static int hostapd_dpp_process_conf_obj(void *ctx,
 		hostapd_dpp_handle_config_obj(hapd, auth,
 					      &auth->conf_obj[i]);
 
+	os_free(hapd->conf->dpp_1905_connector);
+	if (auth->dpp_1905_connector) {
+		hapd->conf->dpp_1905_connector = os_strdup(auth->dpp_1905_connector);
+		wpa_msg(hapd->msg_ctx, MSG_INFO, DPP_EVENT_1905_CONNECTOR "%s",
+			auth->dpp_1905_connector);
+	}
 	return 0;
 }
 #endif /* CONFIG_DPP2 */
@@ -2100,6 +2106,14 @@ int hostapd_dpp_configurator_sign(struct hostapd_data *hapd, const char *cmd)
 	if (dpp_set_configurator(auth, cmd) == 0 &&
 	    dpp_configurator_own_config(auth, curve, 1) == 0) {
 		hostapd_dpp_handle_config_obj(hapd, auth, &auth->conf_obj[0]);
+
+		os_free(hapd->conf->dpp_1905_connector);
+		if (auth->dpp_1905_connector) {
+			hapd->conf->dpp_1905_connector = os_strdup(auth->dpp_1905_connector);
+			wpa_msg(hapd->msg_ctx, MSG_INFO, DPP_EVENT_1905_CONNECTOR "%s",
+				auth->dpp_1905_connector);
+		}
+
 		ret = 0;
 	}
 
@@ -2712,4 +2726,27 @@ void hostapd_dpp_remove_bi(void *ctx, struct dpp_bootstrap_info *bi)
 	hostapd_for_each_interface(interfaces, handle_dpp_remove_bi, bi);
 }
 
+
+struct dpp_authentication *
+hostapd_dpp_map_peer_disc_auth(struct dpp_global *dpp, void *ctx)
+{
+	struct dpp_authentication *auth;
+	struct hostapd_data *hapd = ctx;
+
+	auth = dpp_alloc_auth(dpp, hapd->msg_ctx);
+
+	if (!auth)
+		return NULL;
+
+	if (hapd->conf->dpp_1905_connector)
+		auth->dpp_1905_connector = os_strdup(hapd->conf->dpp_1905_connector);
+	if (hapd->conf->dpp_netaccesskey)
+		auth->net_access_key = wpabuf_dup(hapd->conf->dpp_netaccesskey);
+	if (hapd->conf->dpp_csign)
+		auth->conf_obj->c_sign_key = wpabuf_dup(hapd->conf->dpp_csign);
+	if (hapd->conf->dpp_netaccesskey_expiry)
+		auth->net_access_key_expiry = hapd->conf->dpp_netaccesskey_expiry;
+
+	return auth;
+}
 #endif /* CONFIG_DPP2 */
diff --git a/src/ap/dpp_hostapd.h b/src/ap/dpp_hostapd.h
index 5a7be0d..4dcc1b7 100644
--- a/src/ap/dpp_hostapd.h
+++ b/src/ap/dpp_hostapd.h
@@ -49,5 +49,7 @@ int hostapd_dpp_chirp(struct hostapd_data *hapd, const char *cmd);
 void hostapd_dpp_chirp_stop(struct hostapd_data *hapd);
 void hostapd_dpp_remove_bi(void *ctx, struct dpp_bootstrap_info *bi);
 int hostapd_dpp_get_map_flag(void *ctx);
+struct dpp_authentication *
+hostapd_dpp_map_peer_disc_auth(struct dpp_global *dpp, void *ctx);
 
 #endif /* DPP_HOSTAPD_H */
diff --git a/src/common/dpp.c b/src/common/dpp.c
index 23cf92a..67c69a1 100644
--- a/src/common/dpp.c
+++ b/src/common/dpp.c
@@ -3086,13 +3086,16 @@ static int dpp_parse_conf_obj(struct dpp_authentication *auth,
 			legacy = 0;
 	}
 
-	if(is_1905_object) {
+	if (is_1905_object || ((auth->conf_ap) &&
+	    auth->conf_ap->netrole == DPP_NETROLE_MAP_CONTROLLER)) {
 		token = json_get_member(cred, "signedConnector");
 		if (!token || token->type != JSON_STRING) {
 			wpa_printf(MSG_DEBUG, 
 				   "DPP: No signedConnector string found");
 			goto fail;
 		}
+		os_free(auth->dpp_1905_connector);
+		auth->dpp_1905_connector = os_strdup(token->string);
 	}
 
 	if (legacy) {
@@ -3816,6 +3819,7 @@ fail:
 
 static int dpp_compatible_netrole(const char *role1, const char *role2)
 {
+	wpa_printf(MSG_DEBUG, "DPP: netrole1 (own) is %s and netrole2 (peer) is %s\n", role1, role2);
 	return (os_strcmp(role1, "sta") == 0 && os_strcmp(role2, "ap") == 0) ||
 		(os_strcmp(role1, "ap") == 0 && os_strcmp(role2, "sta") == 0) ||
 		(os_strcmp(role1, "sta") == 0 && os_strcmp(role2, "mapBackhaulBss") == 0) ||
@@ -4079,6 +4083,199 @@ unsigned int dpp_next_id(struct dpp_global *dpp)
 }
 
 
+#ifdef CONFIG_DPP2
+static const u8 TRANSACTION_ID = 1;
+
+struct wpabuf * dpp_rx_peer_disc_req(struct dpp_authentication *auth,
+				     const u8 *src, const u8 *buf, size_t len)
+{
+	const u8 *connector, *trans_id;
+	u16 connector_len, trans_id_len;
+	struct os_time now;
+	struct dpp_introduction intro;
+	os_time_t expire;
+	int expiration;
+	enum dpp_status_error res = -1;
+	struct wpabuf *msg;
+	char hex[PMK_LEN * 2 + 1], hexPmkid[PMKID_LEN * 2 + 1];
+
+	wpa_printf(MSG_DEBUG, "DPP: 1905 Peer Discovery Request from " MACSTR,
+		   MAC2STR(src));
+
+	if (!auth->dpp_1905_connector || !auth->net_access_key ||
+	    !auth->conf_obj->c_sign_key) {
+		wpa_printf(MSG_DEBUG, "DPP: No own Connector/keys set");
+		return NULL;
+	}
+
+	os_get_time(&now);
+
+	if (auth->net_access_key_expiry &&
+	    (os_time_t) auth->net_access_key_expiry < now.sec) {
+		wpa_printf(MSG_INFO, "DPP: Own netAccessKey expired");
+		return NULL;
+	}
+
+	trans_id = dpp_get_attr(buf, len, DPP_ATTR_TRANSACTION_ID,
+			       &trans_id_len);
+	if (!trans_id || trans_id_len != 1) {
+		wpa_printf(MSG_DEBUG,
+			   "DPP: Peer did not include Transaction ID");
+		return NULL;
+	}
+
+	connector = dpp_get_attr(buf, len, DPP_ATTR_CONNECTOR, &connector_len);
+	if (!connector) {
+		wpa_printf(MSG_DEBUG,
+			   "DPP: Peer did not include its Connector");
+		return NULL;
+	}
+
+	res = dpp_peer_intro(&intro, auth->dpp_1905_connector,
+			     wpabuf_head(auth->net_access_key),
+			     wpabuf_len(auth->net_access_key),
+			     wpabuf_head(auth->conf_obj->c_sign_key),
+			     wpabuf_len(auth->conf_obj->c_sign_key),
+			     connector, connector_len, &expire);
+	if (res == 255) {
+		wpa_printf(MSG_INFO,
+			   "DPP: Network Introduction protocol resulted in internal failure (peer "
+			   MACSTR ")", MAC2STR(src));
+		return NULL;
+	}
+	if (res != DPP_STATUS_OK) {
+		wpa_printf(MSG_INFO,
+			   "DPP: Network Introduction protocol resulted in failure (peer "
+			   MACSTR " status %d)", MAC2STR(src), res);
+		msg = dpp_map_build_peer_disc_resp(auth, trans_id[0], res);
+		return msg;
+	}
+
+	if (!expire || (os_time_t)auth->net_access_key_expiry < expire)
+		expire = auth->net_access_key_expiry;
+	if (expire)
+		expiration = expire - now.sec;
+	else
+		expiration = 0;
+
+	wpa_snprintf_hex(hex, sizeof(hex), intro.pmk, intro.pmk_len);
+	wpa_snprintf_hex(hexPmkid, sizeof(hexPmkid), intro.pmkid, PMKID_LEN);
+	wpa_msg(auth->msg_ctx, MSG_INFO, DPP_EVENT_PMK "pmk=%s", hex);
+	wpa_msg(auth->msg_ctx, MSG_INFO, DPP_EVENT_PMKID "pmkid=%s", hexPmkid);
+
+	msg = dpp_map_build_peer_disc_resp(auth, trans_id[0], DPP_STATUS_OK);
+	return msg;
+}
+
+void dpp_rx_peer_disc_resp(struct dpp_authentication *auth, const u8 *src,
+			   const u8 *buf, size_t len)
+{
+	const u8 *connector, *trans_id, *status;
+	u16 connector_len, trans_id_len, status_len;
+#ifdef CONFIG_DPP2
+	const u8 *version;
+	u16 version_len;
+#endif /* CONFIG_DPP2 */
+	u8 peer_version = 1;
+	struct dpp_introduction intro;
+	struct os_time now;
+	struct os_reltime rnow;
+	os_time_t expiry;
+	unsigned int seconds;
+	enum dpp_status_error res = -1;
+	char hex[PMK_LEN * 2 + 1], hexPmkid[PMKID_LEN * 2 + 1];
+
+	if (!auth->dpp_1905_connector || !auth->net_access_key ||
+	    !auth->conf_obj->c_sign_key) {
+		wpa_printf(MSG_DEBUG,
+			   "DPP: Profile not found for network introduction");
+		return;
+	}
+
+	trans_id = dpp_get_attr(buf, len, DPP_ATTR_TRANSACTION_ID,
+			       &trans_id_len);
+	if (!trans_id || trans_id_len != 1) {
+		wpa_printf(MSG_DEBUG,
+			   "DPP: Peer did not include Transaction ID");
+		wpa_msg(auth->msg_ctx, MSG_INFO, DPP_EVENT_INTRO "peer=" MACSTR
+			" fail=missing_transaction_id", MAC2STR(src));
+		goto fail;
+	}
+	if (trans_id[0] != TRANSACTION_ID) {
+		wpa_printf(MSG_DEBUG,
+			   "DPP: Ignore frame with unexpected Transaction ID %u",
+			   trans_id[0]);
+		wpa_msg(auth->msg_ctx, MSG_INFO, DPP_EVENT_INTRO "peer=" MACSTR
+			" fail=transaction_id_mismatch", MAC2STR(src));
+		goto fail;
+	}
+
+	status = dpp_get_attr(buf, len, DPP_ATTR_STATUS, &status_len);
+	if (!status || status_len != 1) {
+		wpa_printf(MSG_DEBUG, "DPP: Peer did not include Status");
+		wpa_msg(auth->msg_ctx, MSG_INFO, DPP_EVENT_INTRO "peer=" MACSTR
+			" fail=missing_status", MAC2STR(src));
+		goto fail;
+	}
+	if (status[0] != DPP_STATUS_OK) {
+		wpa_printf(MSG_DEBUG,
+			   "DPP: Peer rejected network introduction: Status %u",
+			   status[0]);
+		wpa_msg(auth->msg_ctx, MSG_INFO, DPP_EVENT_INTRO "peer=" MACSTR
+			" status=%u", MAC2STR(src), status[0]);
+		goto fail;
+	}
+
+	connector = dpp_get_attr(buf, len, DPP_ATTR_CONNECTOR, &connector_len);
+	if (!connector) {
+		wpa_printf(MSG_DEBUG,
+			   "DPP: Peer did not include its Connector");
+		wpa_msg(auth->msg_ctx, MSG_INFO, DPP_EVENT_INTRO "peer=" MACSTR
+			" fail=missing_connector", MAC2STR(src));
+		goto fail;
+	}
+
+	res = dpp_peer_intro(&intro, auth->dpp_1905_connector,
+			     wpabuf_head(auth->net_access_key),
+			     wpabuf_len(auth->net_access_key),
+			     wpabuf_head(auth->conf_obj->c_sign_key),
+			     wpabuf_len(auth->conf_obj->c_sign_key),
+			     connector, connector_len, &expiry);
+	if (res != DPP_STATUS_OK) {
+		wpa_printf(MSG_INFO,
+			   "DPP: Network Introduction protocol resulted in failure");
+		wpa_msg(auth->msg_ctx, MSG_INFO, DPP_EVENT_INTRO "peer=" MACSTR
+			" fail=peer_connector_validation_failed", MAC2STR(src));
+		goto fail;
+	}
+
+#ifdef CONFIG_DPP2
+	version = dpp_get_attr(buf, len, DPP_ATTR_PROTOCOL_VERSION,
+			       &version_len);
+	if (version && version_len >= 1)
+		peer_version = version[0];
+#endif /* CONFIG_DPP2 */
+	if (expiry) {
+		os_get_time(&now);
+		seconds = expiry - now.sec;
+	} else {
+		seconds = 86400 * 7;
+	}
+	os_get_reltime(&rnow);
+
+	wpa_msg(auth->msg_ctx, MSG_INFO, DPP_EVENT_INTRO "peer=" MACSTR
+		" status=%u version=%u", MAC2STR(src), status[0], peer_version);
+
+	wpa_snprintf_hex(hex, sizeof(hex), intro.pmk, intro.pmk_len);
+	wpa_snprintf_hex(hexPmkid, sizeof(hexPmkid), intro.pmkid, PMKID_LEN);
+	wpa_msg(auth->msg_ctx, MSG_INFO, DPP_EVENT_PMK "pmk=%s", hex);
+	wpa_msg(auth->msg_ctx, MSG_INFO, DPP_EVENT_PMKID "pmkid=%s", hexPmkid);
+
+fail:
+	os_memset(&intro, 0, sizeof(intro));
+}
+#endif /* CONFIG_DPP2 */
+
 static int dpp_bootstrap_del(struct dpp_global *dpp, unsigned int id)
 {
 	struct dpp_bootstrap_info *bi, *tmp;
@@ -4638,6 +4835,7 @@ struct dpp_global * dpp_global_init(struct dpp_global_config *config)
 	dpp->cb_ctx = config->cb_ctx;
 	dpp->remove_bi = config->remove_bi;
 	dpp->get_dpp_map_flag = config->get_dpp_map_flag;
+	dpp->dpp_map_peer_disc_auth = config->dpp_map_peer_disc_auth;
 #endif /* CONFIG_DPP2 */
 
 	dl_list_init(&dpp->bootstrap);
diff --git a/src/common/dpp.h b/src/common/dpp.h
index 0ae1eb0..80b505b 100644
--- a/src/common/dpp.h
+++ b/src/common/dpp.h
@@ -364,6 +364,7 @@ struct dpp_authentication {
 	unsigned int ignore_netaccesskey_mismatch:1;
 #endif /* CONFIG_TESTING_OPTIONS */
 	int dpp_map;
+	char *dpp_1905_connector;
 	u8 is_bsta_1905;
 	enum dpp_akm akm_1905;
 };
@@ -706,6 +707,8 @@ struct dpp_global_config {
 	void *cb_ctx;
 	void (*remove_bi)(void *ctx, struct dpp_bootstrap_info *bi);
 	int (*get_dpp_map_flag)(void *ctx);
+	struct dpp_authentication * (*dpp_map_peer_disc_auth)
+				     (struct dpp_global *dpp, void *ctx);
 };
 
 struct dpp_global * dpp_global_init(struct dpp_global_config *config);
@@ -744,5 +747,19 @@ struct dpp_reconfig_id * dpp_gen_reconfig_id(const u8 *csign_key,
 int dpp_update_reconfig_id(struct dpp_reconfig_id *id);
 void dpp_free_reconfig_id(struct dpp_reconfig_id *id);
 
+int dpp_map_peer_disc_start(const char *connector, struct dpp_global *dpp,
+			    void *msg_ctx, void *cb_ctx,
+			    const char *cmd);
+int dpp_map_build_peer_disc_req(const char *connector, struct dpp_global *dpp,
+				const struct hostapd_ip_addr *addr,
+				void *msg_ctx, void *cb_ctx, int port);
+struct wpabuf * dpp_map_build_peer_disc_resp(struct dpp_authentication *auth,
+					     u8 trans_id,
+					     enum dpp_status_error status);
+struct wpabuf * dpp_rx_peer_disc_req(struct dpp_authentication *auth,
+				     const u8 *src, const u8 *buf, size_t len);
+void dpp_rx_peer_disc_resp(struct dpp_authentication *auth,
+			   const u8 *src,
+			   const u8 *buf, size_t len);
 #endif /* CONFIG_DPP */
 #endif /* DPP_H */
diff --git a/src/common/dpp_i.h b/src/common/dpp_i.h
index cbfcde9..9176f70 100644
--- a/src/common/dpp_i.h
+++ b/src/common/dpp_i.h
@@ -24,6 +24,8 @@ struct dpp_global {
 	int (*process_conf_obj)(void *ctx, struct dpp_authentication *auth);
 	void (*remove_bi)(void *ctx, struct dpp_bootstrap_info *bi);
 	int (*get_dpp_map_flag)(void *ctx);
+	struct dpp_authentication * (*dpp_map_peer_disc_auth)
+		(struct dpp_global *dpp, void *ctx);
 #endif /* CONFIG_DPP2 */
 };
 
diff --git a/src/common/dpp_tcp.c b/src/common/dpp_tcp.c
index acf8acf..af968f2 100644
--- a/src/common/dpp_tcp.c
+++ b/src/common/dpp_tcp.c
@@ -240,6 +240,7 @@ static int dpp_tcp_send(struct dpp_connection *conn)
 		conn->read_eloop = 1;
 	if (conn->on_tcp_tx_complete_remove) {
 		dpp_connection_remove(conn);
+
 	} else if (conn->auth && (conn->ctrl || conn->auth->configurator) &&
 		   conn->on_tcp_tx_complete_gas_done) {
 		dpp_controller_gas_done(conn);
@@ -974,6 +975,266 @@ static int dpp_controller_rx_reconfig_auth_resp(struct dpp_connection *conn,
 }
 
 
+static const u8 TRANSACTION_ID = 1;
+
+static
+struct dpp_connection * dpp_map_tcp_init(struct dpp_global *dpp,
+					 const struct hostapd_ip_addr *addr,
+					 void *msg_ctx, void *cb_ctx, int port)
+{
+	struct dpp_connection *conn;
+	struct sockaddr_storage saddr;
+	socklen_t addrlen;
+	char txt[100];
+
+	wpa_printf(MSG_DEBUG, "DPP: Initialize TCP connection to %s port %d",
+		   hostapd_ip_txt(addr, txt, sizeof(txt)), port);
+	if (dpp_ipaddr_to_sockaddr((struct sockaddr *) &saddr, &addrlen,
+				   addr, port) < 0) {
+		return NULL;
+	}
+
+	conn = os_zalloc(sizeof(*conn));
+	if (!conn) {
+		return NULL;
+	}
+
+	conn->global = dpp;
+	conn->sock = socket(AF_INET, SOCK_STREAM, 0);
+	conn->msg_ctx = dpp->msg_ctx;
+	conn->cb_ctx = cb_ctx;
+	if (conn->sock < 0)
+		goto fail;
+
+	if (fcntl(conn->sock, F_SETFL, O_NONBLOCK) != 0) {
+		wpa_printf(MSG_DEBUG, "DPP: fnctl(O_NONBLOCK) failed: %s",
+			   strerror(errno));
+		goto fail;
+	}
+
+	if (connect(conn->sock, (struct sockaddr *) &saddr, addrlen) < 0) {
+		if (errno != EINPROGRESS) {
+			wpa_printf(MSG_DEBUG, "DPP: Failed to connect: %s",
+				   strerror(errno));
+			goto fail;
+		}
+
+		/*
+		 * Continue connecting in the background; eloop will call us
+		 * once the connection is ready (or failed).
+		 */
+	}
+
+	if (eloop_register_sock(conn->sock, EVENT_TYPE_WRITE,
+				dpp_conn_tx_ready, conn, NULL) < 0)
+		goto fail;
+	conn->write_eloop = 1;
+	return conn;
+
+fail:
+	dpp_connection_free(conn);
+        return NULL;
+}
+
+int dpp_map_peer_disc_start(const char *connector, struct dpp_global *dpp,
+			    void *msg_ctx, void *cb_ctx,
+			    const char *cmd)
+{
+	int ret = -1;
+	const char *pos;
+#ifdef CONFIG_DPP2
+	int tcp_port = DPP_TCP_PORT;
+	struct hostapd_ip_addr ipaddr;
+	char *addr;
+#endif /* CONFIG_DPP2 */
+	struct dpp_connection *conn;
+	char txt[100];
+
+#ifdef CONFIG_DPP2
+	pos = os_strstr(cmd, " tcp_port=");
+	if (pos) {
+		pos += 10;
+		tcp_port = atoi(pos);
+	}
+
+	addr = get_param(cmd, " tcp_addr=");
+	if (addr) {
+		int res;
+
+		res = hostapd_parse_ip_addr(addr, &ipaddr);
+		os_free(addr);
+		if (res)
+			return -1;
+	}
+#endif /* CONFIG_DPP2 */
+
+	ret = dpp_map_build_peer_disc_req(connector, dpp, &ipaddr,
+					  msg_ctx, cb_ctx, tcp_port);
+
+	return ret;
+}
+
+int dpp_map_build_peer_disc_req(const char *connector, struct dpp_global *dpp,
+				const struct hostapd_ip_addr *addr,
+				void *msg_ctx, void *cb_ctx, int port)
+{
+	struct dpp_connection *conn = NULL;
+	const u8 *hdr, *pos, *end;
+	struct wpabuf *msg;
+	size_t len;
+	int res = -1;
+	char txt[100];
+
+	len = 5 + 4 + os_strlen(connector);
+#ifdef CONFIG_DPP2
+	len += 5;
+#endif /* CONFIG_DPP2 */
+	msg = dpp_alloc_msg(DPP_PA_PEER_DISCOVERY_REQ, len);
+	if (!msg)
+		goto fail;
+
+	/* Transaction ID */
+	wpabuf_put_le16(msg, DPP_ATTR_TRANSACTION_ID);
+	wpabuf_put_le16(msg, 1);
+	wpabuf_put_u8(msg, TRANSACTION_ID);
+
+	 /* DPP Connector */
+	wpabuf_put_le16(msg, DPP_ATTR_CONNECTOR);
+	wpabuf_put_le16(msg, os_strlen(connector));
+	wpabuf_put_str(msg, connector);
+
+#ifdef CONFIG_DPP2
+        if (DPP_VERSION > 1) {
+                /* Protocol Version */
+                wpabuf_put_le16(msg, DPP_ATTR_PROTOCOL_VERSION);
+                wpabuf_put_le16(msg, 1);
+                wpabuf_put_u8(msg, DPP_VERSION);
+        }
+#endif /* CONFIG_DPP2 */
+	hdr = wpabuf_head(msg);
+	end = hdr + wpabuf_len(msg);
+	hdr += 2; /* skip Category and Actiom */
+	pos = hdr + DPP_HDR_LEN;
+        wpa_printf(MSG_DEBUG, "DPP: Send 1905 Peer Discovery Request %s", connector);
+	conn = dpp_map_tcp_init(dpp, addr, msg_ctx, cb_ctx, port);
+	if (!conn)
+		goto fail;
+
+	conn->msg_out = dpp_tcp_encaps(hdr, pos, end - pos);
+	if (!conn->msg_out)
+		goto fail;
+
+	dl_list_add(&dpp->tcp_init, &conn->list);
+        return 0;
+fail:
+        wpabuf_free(msg);
+	if (conn)
+		dpp_connection_free(conn);
+        return -1;
+}
+
+
+struct wpabuf * dpp_map_build_peer_disc_resp(struct dpp_authentication *auth,
+					     u8 trans_id,
+					     enum dpp_status_error status)
+{
+	struct wpabuf *msg;
+	size_t len;
+	const u8 *hdr, *buf, *pos, *end;
+	struct dpp_relay_controller *ctrl;
+	struct dpp_connection *conn;
+
+	len = 5 + 5 + 4 + os_strlen(auth->dpp_1905_connector);
+#ifdef CONFIG_DPP2
+	len += 5;
+#endif /* CONFIG_DPP2 */
+	msg = dpp_alloc_msg(DPP_PA_PEER_DISCOVERY_RESP, len);
+	if (!msg)
+		goto fail;
+
+	/* Transaction ID */
+	wpabuf_put_le16(msg, DPP_ATTR_TRANSACTION_ID);
+	wpabuf_put_le16(msg, 1);
+	wpabuf_put_u8(msg, trans_id);
+
+	/* DPP Status */
+	wpabuf_put_le16(msg, DPP_ATTR_STATUS);
+	wpabuf_put_le16(msg, 1);
+	wpabuf_put_u8(msg, status);
+
+	/* DPP Connector */
+	if (status == DPP_STATUS_OK) {
+		wpabuf_put_le16(msg, DPP_ATTR_CONNECTOR);
+		wpabuf_put_le16(msg, os_strlen(auth->dpp_1905_connector));
+		wpabuf_put_str(msg, auth->dpp_1905_connector);
+	}
+
+#ifdef CONFIG_DPP2
+	if (DPP_VERSION > 1) {
+		/* Protocol Version */
+		wpabuf_put_le16(msg, DPP_ATTR_PROTOCOL_VERSION);
+		wpabuf_put_le16(msg, 1);
+		wpabuf_put_u8(msg, DPP_VERSION);
+	}
+#endif /* CONFIG_DPP2 */
+	return msg;
+fail:
+	wpabuf_free(msg);
+	return NULL;
+}
+
+
+static int dpp_controller_rx_peer_disc_req(struct dpp_connection *conn,
+					   const u8 *hdr, const u8 *buf,
+					   size_t len)
+{
+	struct wpabuf *msg;
+	struct dpp_authentication *auth;
+	int res = -1;
+
+	auth = conn->global->dpp_map_peer_disc_auth(conn->global,
+						    conn->cb_ctx);
+
+	if (!auth)
+		return res;
+
+	wpa_printf(MSG_DEBUG, "DPP: 1905 Peer Discovery Request");
+
+	msg = dpp_rx_peer_disc_req(auth, hdr, buf, len);
+	if (!msg) {
+		wpa_printf(MSG_DEBUG, "DPP: No Peer Discovery response generated");
+		return res;
+	}
+	res = 0;
+
+	conn->auth = auth;
+	conn->on_tcp_tx_complete_remove = 1;
+        res = dpp_tcp_send_msg(conn, msg);
+
+	wpabuf_free(msg);
+	return res;
+}
+
+
+static int dpp_controller_rx_peer_disc_resp(struct dpp_connection *conn,
+					    const u8 *hdr, const u8 *buf,
+					    size_t len)
+{
+	struct dpp_authentication *auth;
+
+	auth = conn->global->dpp_map_peer_disc_auth(conn->global,
+						    conn->cb_ctx);
+
+	if (!auth)
+		return -1;
+
+	wpa_printf(MSG_DEBUG, "DPP: 1905 Peer Discovery Response");
+
+	dpp_rx_peer_disc_resp(auth, hdr, buf, len);
+	return -1;  /*closes connection */
+}
+
+
 static int dpp_controller_rx_action(struct dpp_connection *conn, const u8 *msg,
 				    size_t len)
 {
@@ -1033,6 +1294,12 @@ static int dpp_controller_rx_action(struct dpp_connection *conn, const u8 *msg,
 	case DPP_PA_RECONFIG_AUTH_RESP:
 		return dpp_controller_rx_reconfig_auth_resp(conn, msg, pos,
 							    end - pos);
+	case DPP_PA_PEER_DISCOVERY_REQ:
+		return dpp_controller_rx_peer_disc_req(conn, msg, pos,
+						       end - pos);
+	case DPP_PA_PEER_DISCOVERY_RESP:
+		return dpp_controller_rx_peer_disc_resp(conn, msg, pos,
+							end - pos);
 	default:
 		/* TODO: missing messages types */
 		wpa_printf(MSG_DEBUG,
diff --git a/src/common/wpa_ctrl.h b/src/common/wpa_ctrl.h
index 720a540..33c2cc3 100644
--- a/src/common/wpa_ctrl.h
+++ b/src/common/wpa_ctrl.h
@@ -181,6 +181,7 @@ extern "C" {
 #define DPP_EVENT_CONFOBJ_PASS "DPP-CONFOBJ-PASS "
 #define DPP_EVENT_CONFOBJ_PSK "DPP-CONFOBJ-PSK "
 #define DPP_EVENT_CONNECTOR "DPP-CONNECTOR "
+#define DPP_EVENT_1905_CONNECTOR "DPP-1905-CONNECTOR "
 #define DPP_EVENT_C_SIGN_KEY "DPP-C-SIGN-KEY "
 #define DPP_EVENT_PP_KEY "DPP-PP-KEY "
 #define DPP_EVENT_NET_ACCESS_KEY "DPP-NET-ACCESS-KEY "
@@ -204,6 +205,8 @@ extern "C" {
 #define DPP_EVENT_CHIRP_RX "DPP-CHIRP-RX "
 #define DPP_EVENT_DF_COUNT_THRESH "DPP-DF-COUNT-THRESH "
 #define DPP_EVENT_DISC_CONF "DPP-DISC-CONF "
+#define DPP_EVENT_PMK "DPP-PMK "
+#define DPP_EVENT_PMKID "DPP-PMKID "
 
 /* MESH events */
 #define MESH_GROUP_STARTED "MESH-GROUP-STARTED "
diff --git a/wpa_supplicant/config.c b/wpa_supplicant/config.c
index 2df4722..48280de 100644
--- a/wpa_supplicant/config.c
+++ b/wpa_supplicant/config.c
@@ -5083,6 +5083,7 @@ static const struct global_parse_data global_fields[] = {
 	{ STR(dpp_name), 0 },
 	{ STR(dpp_mud_url), 0 },
 	{ INT_RANGE(dpp_map, 0, 1), 0 },
+	{ STR(dpp_1905_connector) },
 #endif /* CONFIG_DPP */
 	{ INT_RANGE(coloc_intf_reporting, 0, 1), 0 },
 #ifdef CONFIG_WNM
diff --git a/wpa_supplicant/config.h b/wpa_supplicant/config.h
index 7e2c83b..3a07521 100644
--- a/wpa_supplicant/config.h
+++ b/wpa_supplicant/config.h
@@ -764,6 +764,8 @@ struct wpa_config {
 	 */
 	int dpp_map;
 
+	char *dpp_1905_connector;
+
 #define MAX_SEC_DEVICE_TYPES 5
 	/**
 	 * sec_device_types - Secondary Device Types (P2P)
diff --git a/wpa_supplicant/config_file.c b/wpa_supplicant/config_file.c
index 02bb137..a9c15ed 100644
--- a/wpa_supplicant/config_file.c
+++ b/wpa_supplicant/config_file.c
@@ -1655,6 +1655,8 @@ static void wpa_config_write_global(FILE *f, struct wpa_config *config)
 			config->extended_key_id);
 	if (config->dpp_map)
 		fprintf(f, "dpp_map=%d\n", config->dpp_map);
+	if (config->dpp_1905_connector)
+		fprintf(f, "dpp_1905_connector=%s\n", config->dpp_1905_connector);
 }
 
 #endif /* CONFIG_NO_CONFIG_WRITE */
diff --git a/wpa_supplicant/config_winreg.c b/wpa_supplicant/config_winreg.c
index fe4ee79..7e261d9 100644
--- a/wpa_supplicant/config_winreg.c
+++ b/wpa_supplicant/config_winreg.c
@@ -287,6 +287,7 @@ static int wpa_config_read_global(struct wpa_config *config, HKEY hk)
 		config->extended_key_id = val;
 	}
 	wpa_config_read_reg_dword(hk, TEXT("dpp_map"), &config->dpp_map);
+	wpa_config_read_reg_dword(hk, TEXT("dpp_1905_connector"), &config->dpp_1905_connector);
 
 	return errors ? -1 : 0;
 }
diff --git a/wpa_supplicant/ctrl_iface.c b/wpa_supplicant/ctrl_iface.c
index 4bc8538..2e63747 100644
--- a/wpa_supplicant/ctrl_iface.c
+++ b/wpa_supplicant/ctrl_iface.c
@@ -11204,6 +11204,11 @@ char * wpa_supplicant_ctrl_iface_process(struct wpa_supplicant *wpa_s,
 	} else if (os_strncmp(buf, "DPP_CA_SET ", 11) == 0) {
 		if (wpas_dpp_ca_set(wpa_s, buf + 10) < 0)
 			reply_len = -1;
+	} else if (os_strncmp(buf, "DPP_MAP_PEER_DISC_START ", 23) == 0) {
+		if (wpa_s->conf->dpp_1905_connector &&
+		    dpp_map_peer_disc_start(wpa_s->conf->dpp_1905_connector,
+					    wpa_s->dpp, wpa_s, wpa_s, buf + 23) < 0)
+			reply_len = -1;
 #endif /* CONFIG_DPP2 */
 #endif /* CONFIG_DPP */
 	} else {
diff --git a/wpa_supplicant/dpp_supplicant.c b/wpa_supplicant/dpp_supplicant.c
index dce7b80..feff14e 100644
--- a/wpa_supplicant/dpp_supplicant.c
+++ b/wpa_supplicant/dpp_supplicant.c
@@ -1680,6 +1680,13 @@ static void wpas_dpp_gas_resp_cb(void *ctx, const u8 *addr, u8 dialog_token,
 		if (res < 0)
 			goto fail;
 	}
+	os_free(wpa_s->conf->dpp_1905_connector);
+	if (auth->dpp_1905_connector) {
+		wpa_s->conf->dpp_1905_connector = os_strdup(auth->dpp_1905_connector);
+		wpa_msg(wpa_s, MSG_INFO, DPP_EVENT_1905_CONNECTOR "%s",
+			auth->dpp_1905_connector);
+	}
+
 	if (auth->num_conf_obj)
 		wpas_dpp_post_process_config(wpa_s, auth);
 	if (wpas_dpp_handle_key_pkg(wpa_s, auth->conf_key_pkg) < 0)
@@ -2041,6 +2048,39 @@ static void wpas_dpp_remove_bi(void *ctx, struct dpp_bootstrap_info *bi)
 }
 
 
+struct dpp_authentication *
+wpas_dpp_map_peer_disc_auth(struct dpp_global *dpp, void *ctx)
+{
+	struct wpa_supplicant *wpa_s = ctx;
+	struct dpp_authentication *auth;
+	struct wpa_ssid *ssid;
+
+	for (ssid = wpa_s->conf->ssid; ssid; ssid = ssid->next) {
+		if (ssid && ssid->dpp_connector && ssid->dpp_netaccesskey &&
+		    ssid->dpp_csign)
+			break;
+	}
+
+	auth = dpp_alloc_auth(dpp, wpa_s);
+
+	if (!auth)
+		return NULL;
+
+	if (wpa_s->conf->dpp_1905_connector)
+		auth->dpp_1905_connector = os_strdup(wpa_s->conf->dpp_1905_connector);
+	if (ssid && ssid->dpp_netaccesskey)
+		auth->net_access_key = wpabuf_alloc_copy(ssid->dpp_netaccesskey,
+							 ssid->dpp_netaccesskey_len);
+	if (ssid && ssid->dpp_csign)
+		auth->conf_obj->c_sign_key = wpabuf_alloc_copy(ssid->dpp_csign,
+							       ssid->dpp_csign_len);
+	if (ssid && ssid->dpp_netaccesskey_expiry)
+		auth->net_access_key_expiry = ssid->dpp_netaccesskey_expiry;
+
+	return auth;
+}
+
+
 static void
 wpas_dpp_rx_presence_announcement(struct wpa_supplicant *wpa_s, const u8 *src,
 				  const u8 *hdr, const u8 *buf, size_t len,
@@ -3072,6 +3112,12 @@ int wpas_dpp_configurator_sign(struct wpa_supplicant *wpa_s, const char *cmd)
 	    dpp_configurator_own_config(auth, curve, 0) == 0)
 		ret = wpas_dpp_handle_config_obj(wpa_s, auth,
 						 &auth->conf_obj[0]);
+	os_free(wpa_s->conf->dpp_1905_connector);
+	if (auth->dpp_1905_connector) {
+		wpa_s->conf->dpp_1905_connector = os_strdup(auth->dpp_1905_connector);
+		wpa_msg(wpa_s, MSG_INFO, DPP_EVENT_1905_CONNECTOR "%s",
+			auth->dpp_1905_connector);
+	}
 	if (!ret)
 		wpas_dpp_post_process_config(wpa_s, auth);
 
@@ -3385,6 +3431,7 @@ int wpas_dpp_init(struct wpa_supplicant *wpa_s)
 #ifdef CONFIG_DPP2
 	config.remove_bi = wpas_dpp_remove_bi;
 	config.get_dpp_map_flag = wpas_dpp_get_map_flag;
+	config.dpp_map_peer_disc_auth = wpas_dpp_map_peer_disc_auth;
 #endif /* CONFIG_DPP2 */
 	wpa_s->dpp = dpp_global_init(&config);
 	return wpa_s->dpp ? 0 : -1;
diff --git a/wpa_supplicant/wpa_cli.c b/wpa_supplicant/wpa_cli.c
index 04a241c..ffc29b5 100644
--- a/wpa_supplicant/wpa_cli.c
+++ b/wpa_supplicant/wpa_cli.c
@@ -3093,6 +3093,14 @@ static int wpa_cli_cmd_dpp_stop_chirp(struct wpa_ctrl *ctrl, int argc,
 	return wpa_ctrl_command(ctrl, "DPP_STOP_CHIRP");
 }
 
+
+static int wpa_cli_cmd_dpp_map_peer_disc_start(struct wpa_ctrl *ctrl,
+					       int argc,
+					       char *argv[])
+{
+	return wpa_cli_cmd(ctrl, "DPP_MAP_PEER_DISC_START", 1, argc, argv);
+}
+
 #endif /* CONFIG_DPP2 */
 #endif /* CONFIG_DPP */
 
@@ -3846,6 +3854,10 @@ static const struct wpa_cli_cmd wpa_cli_commands[] = {
 	{ "dpp_stop_chirp", wpa_cli_cmd_dpp_stop_chirp, NULL,
 	  cli_cmd_flag_none,
 	  "= stop DPP chirp" },
+	{ "dpp_map_peer_disc_start", wpa_cli_cmd_dpp_map_peer_disc_start,
+	  NULL,
+	  cli_cmd_flag_none,
+	  "= start map peer disc" },
 #endif /* CONFIG_DPP2 */
 #endif /* CONFIG_DPP */
 	{ "all_bss", wpa_cli_cmd_all_bss, NULL, cli_cmd_flag_none,
@@ -4200,6 +4212,8 @@ static void wpa_cli_action_process(const char *msg)
 		wpa_cli_exec(action_file, ifname, pos);
 	} else if (str_starts(pos, DPP_EVENT_CONNECTOR)) {
 		wpa_cli_exec(action_file, ifname, pos);
+	} else if (str_starts(pos, DPP_EVENT_1905_CONNECTOR)) {
+		wpa_cli_exec(action_file, ifname, pos);
 	} else if (str_starts(pos, DPP_EVENT_CONFOBJ_PASS)) {
 		wpa_cli_exec(action_file, ifname, pos);
 	} else if (str_starts(pos, DPP_EVENT_CONFOBJ_PSK)) {
