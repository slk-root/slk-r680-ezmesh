diff --git a/src/ap/ap_drv_ops.h b/src/ap/ap_drv_ops.h
index 93f28bb..2ccbaa0 100644
--- a/src/ap/ap_drv_ops.h
+++ b/src/ap/ap_drv_ops.h
@@ -408,4 +408,25 @@ static inline int hostapd_set_fils_aad(struct hostapd_data *hapd,
 		return -1;
 	return hapd->driver->set_fils_aad(hapd->drv_priv, param);
 }
+
+static inline int hostapd_drv_remain_on_channel(struct hostapd_data *hapd,
+						unsigned int freq,
+						unsigned int duration)
+{
+	if (!hapd->driver ||
+	    !hapd->driver->remain_on_channel || !hapd->drv_priv)
+		return -1;
+	return hapd->driver->remain_on_channel(hapd->drv_priv, freq,
+							duration);
+}
+
+static inline int hostapd_drv_cancel_remain_on_channel(struct hostapd_data *hapd)
+{
+
+	if (!hapd->driver ||
+	    !hapd->driver->cancel_remain_on_channel || !hapd->drv_priv)
+		return -1;
+	return hapd->driver->cancel_remain_on_channel(hapd->drv_priv);
+}
+
 #endif /* AP_DRV_OPS */
diff --git a/src/ap/dpp_hostapd.c b/src/ap/dpp_hostapd.c
index 463a0f5..be0639e 100644
--- a/src/ap/dpp_hostapd.c
+++ b/src/ap/dpp_hostapd.c
@@ -217,6 +217,60 @@ static void hostapd_dpp_auth_resp_retry(struct hostapd_data *hapd)
 			       hostapd_dpp_auth_resp_retry_timeout, hapd, NULL);
 }
 
+#ifdef CONFIG_DPP
+void hapd_dpp_remain_on_channel_cb(struct hostapd_data *hapd,
+				   unsigned int freq, unsigned int duration)
+{
+        wpa_printf(MSG_DEBUG,
+                   "DPP: Remain-on-channel started for listen on %u MHz for %u ms",
+                   freq, duration);
+	os_sleep(0, duration);
+}
+#endif
+
+static int hostapd_dpp_listen_start(struct hostapd_data *hapd,
+				    unsigned int freq)
+{
+        if (hapd->dpp_listen_freq)
+                hostapd_dpp_listen_stop(hapd);
+        hapd->dpp_listen_freq = freq;
+
+	if (hostapd_drv_remain_on_channel(hapd, freq,
+					  hapd->max_remain_on_chan) < 0) {
+		wpa_printf(MSG_DEBUG,
+			   "DPP: Failed to request the driver to remain on channel (%u MHz) for listen",
+			   freq);
+		return -1;
+	}
+
+        return 0;
+}
+
+#ifdef CONFIG_DPP
+void hapd_dpp_cancel_remain_on_channel_cb(struct hostapd_data *hapd,
+					  unsigned int freq)
+{
+	if (hapd->dpp_auth && hapd->dpp_in_response_listen) {
+		unsigned int new_freq;
+
+		/* Continue listen with a new remain-on-channel */
+		if (hapd->dpp_auth->neg_freq > 0)
+			new_freq = hapd->dpp_auth->neg_freq;
+		else
+			new_freq = hapd->dpp_auth->curr_freq;
+		wpa_printf(MSG_DEBUG,
+			   "DPP: Continue wait on %u MHz for the ongoing DPP provisioning session",
+			   new_freq);
+		hostapd_dpp_listen_start(hapd, new_freq);
+		return;
+	}
+
+	if (hapd->dpp_listen_freq) {
+		/* Continue listen with a new remain-on-channel */
+		hostapd_dpp_listen_start(hapd, hapd->dpp_listen_freq);
+	}
+}
+#endif
 
 void hostapd_dpp_tx_status(struct hostapd_data *hapd, const u8 *dst,
 			   const u8 *data, size_t data_len, int ok)
@@ -310,11 +364,11 @@ void hostapd_dpp_tx_status(struct hostapd_data *hapd, const u8 *dst,
 
 		if (hapd->dpp_auth->neg_freq !=
 		    (unsigned int) hapd->iface->freq && hapd->iface->freq > 0) {
-			/* TODO: Listen operation on non-operating channel */
 			wpa_printf(MSG_INFO,
-				   "DPP: Listen operation on non-operating channel (%d MHz) is not yet supported (operating channel: %d MHz)",
-				   hapd->dpp_auth->neg_freq, hapd->iface->freq);
+			   "DPP: Listen operation on non-operating channel (%d MHz) requested (operating channel: %d MHz)",
+			   hapd->dpp_auth->neg_freq, hapd->iface->freq);
 		}
+		hostapd_dpp_listen_start(hapd, hapd->dpp_auth->neg_freq);
 	}
 
 	if (hapd->dpp_auth_ok_on_ack)
@@ -334,7 +388,7 @@ static void hostapd_dpp_reply_wait_timeout(void *eloop_ctx, void *timeout_ctx)
 		return;
 
 	wait_time = hapd->dpp_resp_wait_time ?
-		hapd->dpp_resp_wait_time : 2000;
+		hapd->dpp_resp_wait_time : 3000;
 	os_get_reltime(&now);
 	os_reltime_sub(&now, &hapd->dpp_last_init, &diff);
 	diff_ms = diff.sec * 1000 + diff.usec / 1000;
@@ -721,7 +775,6 @@ fail:
 	return -1;
 }
 
-
 int hostapd_dpp_listen(struct hostapd_data *hapd, const char *cmd)
 {
 	int freq;
@@ -740,20 +793,21 @@ int hostapd_dpp_listen(struct hostapd_data *hapd, const char *cmd)
 	hapd->dpp_qr_mutual = os_strstr(cmd, " qr=mutual") != NULL;
 
 	if (freq != hapd->iface->freq && hapd->iface->freq > 0) {
-		/* TODO: Listen operation on non-operating channel */
 		wpa_printf(MSG_INFO,
-			   "DPP: Listen operation on non-operating channel (%d MHz) is not yet supported (operating channel: %d MHz)",
+			   "DPP: Listen operation on non-operating channel (%d MHz) requested (operating channel: %d MHz)",
 			   freq, hapd->iface->freq);
-		return -1;
 	}
 
-	return 0;
+	return hostapd_dpp_listen_start(hapd, freq);
 }
 
 
 void hostapd_dpp_listen_stop(struct hostapd_data *hapd)
 {
 	/* TODO: Stop listen operation on non-operating channel */
+	wpa_printf(MSG_DEBUG, "DPP: Stop listen on %u MHz",
+		   hapd->dpp_listen_freq);
+	hostapd_drv_cancel_remain_on_channel(hapd);
 }
 
 
diff --git a/src/ap/dpp_hostapd.h b/src/ap/dpp_hostapd.h
index b33540d..734aabb 100644
--- a/src/ap/dpp_hostapd.h
+++ b/src/ap/dpp_hostapd.h
@@ -23,6 +23,10 @@ void hostapd_dpp_rx_action(struct hostapd_data *hapd, const u8 *src,
 			   const u8 *buf, size_t len, unsigned int freq);
 void hostapd_dpp_tx_status(struct hostapd_data *hapd, const u8 *dst,
 			   const u8 *data, size_t data_len, int ok);
+void hapd_dpp_remain_on_channel_cb(struct hostapd_data *hapd,
+				   unsigned int freq, unsigned int duration);
+void hapd_dpp_cancel_remain_on_channel_cb(struct hostapd_data *hapd,
+					  unsigned int freq);
 struct wpabuf *
 hostapd_dpp_gas_req_handler(struct hostapd_data *hapd, const u8 *sa,
 			    const u8 *query, size_t query_len,
diff --git a/src/ap/drv_callbacks.c b/src/ap/drv_callbacks.c
index a5109b1..5db21de 100644
--- a/src/ap/drv_callbacks.c
+++ b/src/ap/drv_callbacks.c
@@ -2081,6 +2081,28 @@ void wpa_supplicant_event(void *ctx, enum wpa_event_type event,
 			wps->ssid_len = data->update_ssid.ssid_len;
 		}
 		break;
+	case EVENT_REMAIN_ON_CHANNEL:
+#ifdef CONFIG_OFFCHANNEL
+		offchannel_remain_on_channel_cb(
+				hapd, data->remain_on_channel.freq,
+				data->remain_on_channel.duration);
+#endif /* CONFIG_OFFCHANNEL */
+#ifdef CONFIG_DPP
+		hapd_dpp_remain_on_channel_cb(
+				hapd, data->remain_on_channel.freq,
+				data->remain_on_channel.duration);
+#endif /* CONFIG_DPP */
+		break;
+	case EVENT_CANCEL_REMAIN_ON_CHANNEL:
+#ifdef CONFIG_OFFCHANNEL
+		offchannel_cancel_remain_on_channel_cb(
+			hapd, data->remain_on_channel.freq);
+#endif /* CONFIG_OFFCHANNEL */
+#ifdef CONFIG_DPP
+		hapd_dpp_cancel_remain_on_channel_cb(
+			hapd, data->remain_on_channel.freq);
+#endif /* CONFIG_DPP */
+		break;
 	default:
 		wpa_printf(MSG_DEBUG, "Unknown event %d", event);
 		break;
diff --git a/src/ap/hostapd.c b/src/ap/hostapd.c
index 7517752..15c31d8 100644
--- a/src/ap/hostapd.c
+++ b/src/ap/hostapd.c
@@ -1309,6 +1309,7 @@ static int hostapd_setup_bss(struct hostapd_data *hapd, int first)
 		return -1;
 
 #ifdef CONFIG_DPP
+	hapd->max_remain_on_chan = 5000;
 	hapd->gas = gas_query_ap_init(hapd, hapd->msg_ctx);
 	if (!hapd->gas)
 		return -1;
diff --git a/src/ap/hostapd.h b/src/ap/hostapd.h
index b70d13f..c2961eb 100644
--- a/src/ap/hostapd.h
+++ b/src/ap/hostapd.h
@@ -370,9 +370,11 @@ struct hostapd_data {
 
 	int dhcp_sock; /* UDP socket used with the DHCP server */
 
+	unsigned int max_remain_on_chan;
 #ifdef CONFIG_DPP
 	int dpp_init_done;
 	struct dpp_authentication *dpp_auth;
+	unsigned int dpp_listen_freq;
 	u8 dpp_allowed_roles;
 	int dpp_qr_mutual;
 	int dpp_auth_ok_on_ack;
