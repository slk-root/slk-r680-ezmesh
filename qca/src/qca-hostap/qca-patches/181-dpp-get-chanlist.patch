diff --git a/src/ap/dpp_hostapd.c b/src/ap/dpp_hostapd.c
index 15aa82b..1cc7722 100644
--- a/src/ap/dpp_hostapd.c
+++ b/src/ap/dpp_hostapd.c
@@ -26,6 +26,8 @@ static void hostapd_dpp_reply_wait_timeout(void *eloop_ctx, void *timeout_ctx);
 static void hostapd_dpp_auth_success(struct hostapd_data *hapd, int initiator);
 static void hostapd_dpp_init_timeout(void *eloop_ctx, void *timeout_ctx);
 static int hostapd_dpp_auth_init_next(struct hostapd_data *hapd);
+static void hostapd_dpp_pkex_req_timeout(void *eloop_ctx, void *timeout_ctx);
+static int hostapd_dpp_pkex_next(struct hostapd_data *hapd);
 #ifdef CONFIG_DPP2
 static void hostapd_dpp_reconfig_reply_wait_timeout(void *eloop_ctx,
 						    void *timeout_ctx);
@@ -394,6 +396,30 @@ static void hostapd_dpp_set_testing_options(struct hostapd_data *hapd,
 #endif /* CONFIG_TESTING_OPTIONS */
 }
 
+static int hostapd_dpp_pkex_next(struct hostapd_data *hapd)
+{
+	struct dpp_pkex *dpp_pkex;
+
+	dpp_pkex = hapd->dpp_pkex;
+
+	if (dpp_pkex->freq_idx >= dpp_pkex->num_freq)
+		return -1;
+	hostapd_drv_send_action(hapd, dpp_pkex->freqlist[dpp_pkex->freq_idx], 2000, broadcast,
+		wpabuf_head(dpp_pkex->exchange_req),
+		wpabuf_len(dpp_pkex->exchange_req));	
+	dpp_pkex->freq_idx++;
+	return 0;
+}
+
+static void hostapd_dpp_pkex_req_timeout(void *eloop_ctx, void *timeout_ctx)
+{
+	struct hostapd_data *hapd = eloop_ctx;
+
+	if (!hapd->dpp_pkex)
+		return;
+
+	hostapd_dpp_pkex_next(hapd);
+}
 
 static void hostapd_dpp_init_timeout(void *eloop_ctx, void *timeout_ctx)
 {
@@ -517,6 +543,8 @@ int hostapd_dpp_auth_init(struct hostapd_data *hapd, const char *cmd)
 	u8 allowed_roles = DPP_CAPAB_CONFIGURATOR;
 	unsigned int neg_freq = 0;
 	int tcp = 0;
+	struct hostapd_hw_modes *own_modes;
+	u16 num_modes;
 #ifdef CONFIG_DPP2
 	int tcp_port = DPP_TCP_PORT;
 	struct hostapd_ip_addr ipaddr;
@@ -604,10 +632,21 @@ int hostapd_dpp_auth_init(struct hostapd_data *hapd, const char *cmd)
 		dpp_auth_deinit(hapd->dpp_auth);
 	}
 
+	own_modes = hapd->iface->hw_features;
+	num_modes = hapd->iface->num_hw_features;
+
+	if ((!own_modes) && hapd->driver != NULL &&
+			hapd->driver->get_hw_feature_data2 != NULL) {
+		u16 flags;
+		u8 dfs_domain;
+		own_modes = hapd->driver->get_hw_feature_data2(hapd->drv_priv, &num_modes,
+				&flags, &dfs_domain);
+	}
+
 	auth = dpp_auth_init(hapd->iface->interfaces->dpp, hapd->msg_ctx,
 			     peer_bi, own_bi, allowed_roles, neg_freq,
-			     hapd->iface->hw_features,
-			     hapd->iface->num_hw_features);
+			     own_modes,
+			     num_modes);
 	if (!auth)
 		goto fail;
 	hostapd_dpp_set_testing_options(hapd, auth);
@@ -1867,6 +1906,7 @@ void hostapd_dpp_rx_action(struct hostapd_data *hapd, const u8 *src,
 		hostapd_dpp_rx_pkex_exchange_req(hapd, src, buf, len, freq);
 		break;
 	case DPP_PA_PKEX_EXCHANGE_RESP:
+		eloop_cancel_timeout(hostapd_dpp_pkex_req_timeout, hapd, NULL);
 		hostapd_dpp_rx_pkex_exchange_resp(hapd, src, buf, len, freq);
 		break;
 	case DPP_PA_PKEX_COMMIT_REVEAL_REQ:
@@ -2015,6 +2055,9 @@ int hostapd_dpp_pkex_add(struct hostapd_data *hapd, const char *cmd)
 {
 	struct dpp_bootstrap_info *own_bi;
 	const char *pos, *end;
+	struct hostapd_hw_modes *own_modes;
+	u16 num_modes;
+	struct dpp_pkex *dpp_pkex;
 
 	pos = os_strstr(cmd, " own=");
 	if (!pos)
@@ -2069,13 +2112,35 @@ int hostapd_dpp_pkex_add(struct hostapd_data *hapd, const char *cmd)
 		if (!hapd->dpp_pkex)
 			return -1;
 
+		dpp_pkex = hapd->dpp_pkex;
 		msg = hapd->dpp_pkex->exchange_req;
+
+		own_modes = hapd->iface->hw_features;
+		num_modes = hapd->iface->num_hw_features;
+
+		if ((!own_modes) && hapd->driver != NULL &&
+	            hapd->driver->get_hw_feature_data2 != NULL) {
+			u16 flags;
+			u8 dfs_domain;
+			own_modes = hapd->driver->get_hw_feature_data2(hapd->drv_priv, &num_modes,
+									&flags, &dfs_domain);
+		}
+
+		if (dpp_pkex_prepare_channel_list(hapd->dpp_pkex, own_modes, num_modes) == -1) {
+			wpa_printf(MSG_DEBUG, "DPP: Channel prepare failed");
+			return -1;
+		}
+		dpp_pkex->freq_idx = 0;
 		/* TODO: Which channel to use? */
 		wpa_msg(hapd->msg_ctx, MSG_INFO, DPP_EVENT_TX "dst=" MACSTR
-			" freq=%u type=%d", MAC2STR(broadcast), 2437,
+			" freq=%u type=%d", MAC2STR(broadcast), dpp_pkex->freqlist[dpp_pkex->freq_idx],
 			DPP_PA_PKEX_EXCHANGE_REQ);
-		hostapd_drv_send_action(hapd, 2437, 0, broadcast,
+		hostapd_drv_send_action(hapd, dpp_pkex->freqlist[dpp_pkex->freq_idx], 2000, broadcast,
 					wpabuf_head(msg), wpabuf_len(msg));
+		dpp_pkex->freq_idx++;
+		eloop_cancel_timeout(hostapd_dpp_pkex_req_timeout, hapd, NULL);
+		eloop_register_timeout(2, 0,
+				       hostapd_dpp_pkex_req_timeout, hapd, NULL);
 	}
 
 	/* TODO: Support multiple PKEX info entries */
diff --git a/src/ap/dpp_hostapd.h b/src/ap/dpp_hostapd.h
index 264d3e4..067b49e 100644
--- a/src/ap/dpp_hostapd.h
+++ b/src/ap/dpp_hostapd.h
@@ -40,6 +40,9 @@ int hostapd_dpp_init(struct hostapd_data *hapd);
 void hostapd_dpp_deinit(struct hostapd_data *hapd);
 void hostapd_dpp_init_global(struct hapd_interfaces *ifaces);
 void hostapd_dpp_deinit_global(struct hapd_interfaces *ifaces);
+int dpp_pkex_prepare_channel_list(struct dpp_pkex *dpp_pkex,
+					struct hostapd_hw_modes *own_modes,
+					u16 num_modes);
 
 int hostapd_dpp_controller_start(struct hostapd_data *hapd, const char *cmd);
 int hostapd_dpp_chirp(struct hostapd_data *hapd, const char *cmd);
diff --git a/src/common/dpp.c b/src/common/dpp.c
index 0ed8c8c..793ab54 100644
--- a/src/common/dpp.c
+++ b/src/common/dpp.c
@@ -501,6 +501,42 @@ static void freq_to_start(unsigned int freqs[], unsigned int num,
 	freqs[0] = freq;
 }
 
+int dpp_pkex_prepare_channel_list(struct dpp_pkex *dpp_pkex, struct hostapd_hw_modes *own_modes, u16 num_modes)
+{
+	u16 m;
+	int c, flag;
+	unsigned int freq;
+
+	dpp_pkex->num_freq = 0;
+
+	if (!own_modes || !num_modes) {
+		dpp_pkex->freqlist[0] = 2437;
+		dpp_pkex->freqlist[1] = 5745;
+		dpp_pkex->freqlist[2] = 5220;
+		dpp_pkex->freqlist[3] = 60480;
+		dpp_pkex->num_freq = DPP_PKEX_MAX_FREQ;
+		return 0;
+	}
+
+	for (m = 0; m < num_modes; m++) {
+		for (c = 0; c < own_modes[m].num_channels; c++) {
+			freq = own_modes[m].channels[c].freq;
+			flag = own_modes[m].channels[c].flag;
+			if (flag & (HOSTAPD_CHAN_DISABLED |
+				    HOSTAPD_CHAN_NO_IR |
+				    HOSTAPD_CHAN_RADAR))
+				continue;
+			if(freq == 2437 || freq == 5745 || freq == 5220 || freq == 60480)
+				dpp_pkex->freqlist[dpp_pkex->num_freq++] = freq;
+			if (dpp_pkex->num_freq == DPP_PKEX_MAX_FREQ) {
+				m = num_modes;
+				break;
+			}
+		}
+	}
+
+	return dpp_pkex->num_freq == 0 ? -1 : 0;
+}
 
 static int dpp_channel_intersect(struct dpp_authentication *auth,
 				 struct hostapd_hw_modes *own_modes,
diff --git a/src/common/dpp.h b/src/common/dpp.h
index 011098f..d4d4f55 100644
--- a/src/common/dpp.h
+++ b/src/common/dpp.h
@@ -120,6 +120,8 @@ enum dpp_connector_key {
 #define DPP_CAPAB_CONFIGURATOR BIT(1)
 #define DPP_CAPAB_ROLE_MASK (BIT(0) | BIT(1))
 
+
+#define DPP_PKEX_MAX_FREQ 4
 #define DPP_BOOTSTRAP_MAX_FREQ 30
 #define DPP_MAX_NONCE_LEN 32
 #define DPP_MAX_HASH_LEN 64
@@ -191,7 +193,9 @@ struct dpp_pkex {
 	unsigned int t; /* number of failures on code use */
 	unsigned int exch_req_wait_time;
 	unsigned int exch_req_tries;
-	unsigned int freq;
+	unsigned int freq; /* curr_freq */
+	unsigned int freqlist[DPP_BOOTSTRAP_MAX_FREQ];
+	unsigned int num_freq, freq_idx;
 };
 
 enum dpp_akm {
