diff --git a/hostapd/ctrl_iface.c b/hostapd/ctrl_iface.c
index 24d4c5b..c6a74f1 100644
--- a/hostapd/ctrl_iface.c
+++ b/hostapd/ctrl_iface.c
@@ -3759,6 +3759,9 @@ static int hostapd_ctrl_iface_receive_process(struct hostapd_data *hapd,
 		if (hostapd_dpp_map_get_jwk_csign(hapd, buf + 22) < 0) {
 			reply_len = -1;
 		}
+	} else if (os_strncmp(buf, "DPP_MAP_BSS_CONF_RESP ", 22) == 0) {
+		if (hostapd_dpp_map_bss_conf_resp(hapd, buf + 22) < 0)
+			reply_len = -1;
 	} else if (os_strncmp(buf, "DPP_PKEX_ADD ", 13) == 0) {
 		res = hostapd_dpp_pkex_add(hapd, buf + 12);
 		if (res < 0) {
diff --git a/hostapd/hostapd_cli.c b/hostapd/hostapd_cli.c
index 99ce56e..54dc7e2 100644
--- a/hostapd/hostapd_cli.c
+++ b/hostapd/hostapd_cli.c
@@ -1479,6 +1479,13 @@ static int hostapd_cli_dpp_map_get_jwk_csign(struct wpa_ctrl *ctrl,
 }
 
 
+static int hostapd_cli_cmd_dpp_process_map_bss_conf_resp(struct wpa_ctrl *ctrl,
+						 int argc, char *argv[])
+{
+       return hostapd_cli_cmd(ctrl, "DPP_MAP_BSS_CONF_RESP", 1, argc, argv);
+}
+
+
 static int hostapd_cli_cmd_dpp_pkex_add(struct wpa_ctrl *ctrl, int argc,
 					char *argv[])
 {
@@ -1740,6 +1747,9 @@ static const struct hostapd_cli_cmd hostapd_cli_commands[] = {
 	{ "dpp_map_get_jwk_csign", hostapd_cli_dpp_map_get_jwk_csign,
 	  NULL,
 	  "[curve=..][conf_obj=..]" },
+	{ "dpp_map_bss_conf_resp", hostapd_cli_cmd_dpp_process_map_bss_conf_resp,
+	  NULL,
+	  "[curve=..][conf_obj=..]" },
 	{ "dpp_pkex_add", hostapd_cli_cmd_dpp_pkex_add, NULL,
 	  "add PKEX code" },
 	{ "dpp_pkex_remove", hostapd_cli_cmd_dpp_pkex_remove, NULL,
diff --git a/src/ap/dpp_hostapd.c b/src/ap/dpp_hostapd.c
index 6aa04c6..7d7d4b0 100644
--- a/src/ap/dpp_hostapd.c
+++ b/src/ap/dpp_hostapd.c
@@ -861,6 +861,32 @@ static void hostapd_map_handle_connector_config_obj(struct hostapd_data *hapd,
 	}
 }
 
+static void hostapd_map_handle_config_obj(struct hostapd_data *hapd,
+					  struct dpp_authentication *auth,
+					  struct dpp_config_obj *conf)
+{
+	if (conf->ssid_len && conf->connector) {
+		wpa_msg(hapd->msg_ctx, MSG_INFO, DPP_MAP_EVENT_CONNECTOR "ssid=%s connector=%s",
+			wpa_ssid_txt(conf->ssid, conf->ssid_len), conf->connector);
+	}
+	if (conf->ssid_len && conf->c_sign_key) {
+		char *hex;
+		size_t hexlen;
+
+		hexlen = 2 * wpabuf_len(conf->c_sign_key) + 1;
+		hex = os_malloc(hexlen);
+		if (hex) {
+			wpa_snprintf_hex(hex, hexlen,
+					 wpabuf_head(conf->c_sign_key),
+					 wpabuf_len(conf->c_sign_key));
+			wpa_msg(hapd->msg_ctx, MSG_INFO,
+				DPP_MAP_EVENT_C_SIGN_KEY "ssid=%s csign=%s",
+				wpa_ssid_txt(conf->ssid, conf->ssid_len), hex);
+			os_free(hex);
+		}
+	}
+}
+
 static void hostapd_dpp_handle_config_obj(struct hostapd_data *hapd,
 					  struct dpp_authentication *auth,
 					  struct dpp_config_obj *conf)
@@ -2094,6 +2120,22 @@ void hostapd_dpp_gas_status_handler(struct hostapd_data *hapd, int ok)
 	hapd->dpp_auth = NULL;
 }
 
+int hostapd_dpp_map_bss_conf_resp(struct hostapd_data *hapd, const char *cmd)
+{
+	struct dpp_authentication *auth;
+	int ret = -1;
+
+	auth = dpp_alloc_auth(hapd->iface->interfaces->dpp, hapd->msg_ctx);
+	if (!auth)
+		return -1;
+
+	if (dpp_map_bss_conf_resp(auth, cmd) == 0) {
+		ret = 0;
+	}
+
+	hostapd_map_handle_config_obj(hapd, auth, &auth->conf_obj[0]);
+	return ret;
+}
 
 int hostapd_dpp_configurator_sign(struct hostapd_data *hapd, const char *cmd)
 {
diff --git a/src/ap/dpp_hostapd.h b/src/ap/dpp_hostapd.h
index 8d6c711..b33540d 100644
--- a/src/ap/dpp_hostapd.h
+++ b/src/ap/dpp_hostapd.h
@@ -34,6 +34,7 @@ int hostapd_dpp_configurator_sign(struct hostapd_data *hapd, const char *cmd);
 int hostapd_dpp_configurator_get_key(struct hostapd_data *hapd, unsigned int id,
 				     char *buf, size_t buflen);
 int hostapd_dpp_map_get_jwk_csign(struct hostapd_data *hapd, const char *cmd);
+int hostapd_dpp_map_bss_conf_resp(struct hostapd_data *hapd, const char *cmd);
 int hostapd_dpp_pkex_add(struct hostapd_data *hapd, const char *cmd);
 int hostapd_dpp_pkex_remove(struct hostapd_data *hapd, const char *id);
 void hostapd_dpp_stop(struct hostapd_data *hapd);
diff --git a/src/common/dpp.c b/src/common/dpp.c
index 6c3cec0..e4196e0 100644
--- a/src/common/dpp.c
+++ b/src/common/dpp.c
@@ -2641,7 +2641,7 @@ skip_groups:
 		goto fail;
 	dpp_debug_print_key("DPP: Received netAccessKey", key);
 
-	if (!auth->map_netaccess_jwk && EVP_PKEY_cmp(key, auth->own_protocol_key) != 1) {
+	if (!auth->map_bss_conf_resp && !auth->map_netaccess_jwk && EVP_PKEY_cmp(key, auth->own_protocol_key) != 1) {
 		wpa_printf(MSG_DEBUG,
 			   "DPP: netAccessKey in connector does not match own protocol key");
 #ifdef CONFIG_TESTING_OPTIONS
@@ -2806,7 +2806,6 @@ static int dpp_parse_cred_dpp(struct dpp_authentication *auth,
 		dpp_copy_ppkey(conf, pp_pub);
 	if (dpp_akm_dpp(conf->akm) || auth->peer_version >= 2)
 		dpp_copy_netaccesskey(auth, conf);
-
 	ret = 0;
 fail:
 	EVP_PKEY_free(csign_pub);
@@ -3026,6 +3025,22 @@ static int dpp_parse_conf_obj(struct dpp_authentication *auth,
 		wpa_msg(auth->msg_ctx, MSG_INFO, DPP_EVENT_DISC_CONF);
 	}
 
+	if (auth->map_bss_conf_resp) {
+		token = json_get_member(discovery, "RUID");
+		if (!token || token->type != JSON_STRING) {
+			dpp_auth_fail(auth, "No RUID value found");
+			goto fail;
+		}
+	}
+
+	if (auth->map_bss_conf_resp) {
+		token = json_get_member(discovery, "BSSID");
+		if (!token || token->type != JSON_STRING) {
+			dpp_auth_fail(auth, "No BSSID value found");
+			goto fail;
+		}
+	}
+
 	if (is_discovery_obj) {
 		ssid64 = json_get_member_base64url(discovery, "ssid64");
 		if (ssid64) {
@@ -4751,7 +4766,6 @@ int dpp_configurator_remove(struct dpp_global *dpp, const char *id)
 	return dpp_configurator_del(dpp, id_val);
 }
 
-
 int dpp_configurator_get_key_id(struct dpp_global *dpp, unsigned int id,
 				char *buf, size_t buflen)
 {
@@ -4954,6 +4968,48 @@ void dpp_global_deinit(struct dpp_global *dpp)
 	os_free(dpp);
 }
 
+int dpp_map_bss_conf_resp(struct dpp_authentication *auth, const char *cmd)
+{
+	char *curve = NULL;
+	char *confobj = NULL;
+	size_t confobjlen = 0;
+	int ret = -1;
+
+	curve = get_param(cmd, " curve=");
+	confobj = get_param(cmd, " confobj=");
+
+	if (confobj)
+		confobjlen = os_strlen(confobj);
+	else
+		goto fail;
+
+	auth->curve = dpp_get_curve_name(curve);
+	if (!auth->curve) {
+		wpa_printf(MSG_INFO, "DPP: Unsupported curve: %s", curve);
+		goto fail;
+	}
+
+	auth->own_protocol_key = dpp_gen_keypair(auth->curve);
+	if (!auth->own_protocol_key)
+		goto fail;
+
+	if (!auth->num_conf_obj)
+		auth->num_conf_obj = 0;
+	auth->peer_version = 2;
+	auth->map_bss_conf_resp = 1;
+	if (dpp_parse_conf_obj(auth, confobj, confobjlen) < 0) {
+                wpa_printf(MSG_DEBUG, "DPP : failed parsing configurationObject JSON");
+		goto fail;
+        }
+
+	auth->map_bss_conf_resp = 0;
+	ret = 0;
+fail:
+	os_free(curve);
+	if (confobj)
+		os_free(confobj);
+	return ret;
+}
 
 #ifdef CONFIG_DPP2
 
diff --git a/src/common/dpp.h b/src/common/dpp.h
index 1ff3a2f..e1b3e0f 100644
--- a/src/common/dpp.h
+++ b/src/common/dpp.h
@@ -368,6 +368,7 @@ struct dpp_authentication {
 	u8 is_bsta_1905;
 	enum dpp_akm akm_1905;
 	struct wpabuf *map_netaccess_jwk;
+	int map_bss_conf_resp;
 };
 
 struct dpp_configurator {
@@ -676,6 +677,7 @@ int dpp_configurator_get_key_id(struct dpp_global *dpp, unsigned int id,
 				char *buf, size_t buflen);
 int dpp_map_get_jwk_csign(struct dpp_authentication *auth, const char *cmd,
 			  char *jwk);
+int dpp_map_bss_conf_resp(struct dpp_authentication *auth, const char *cmd);
 int dpp_configurator_from_backup(struct dpp_global *dpp,
 				 struct dpp_asymmetric_key *key);
 struct dpp_configurator * dpp_configurator_find_kid(struct dpp_global *dpp,
diff --git a/src/common/wpa_ctrl.h b/src/common/wpa_ctrl.h
index 28c2658..ce33e51 100644
--- a/src/common/wpa_ctrl.h
+++ b/src/common/wpa_ctrl.h
@@ -210,6 +210,7 @@ extern "C" {
 #define DPP_MAP_EVENT_CONNECTOR "DPP-MAP-CONNECTOR "
 #define DPP_MAP_NETACCESSKEY_JWK "DPP-MAP-NETACCESSKEY-JWK "
 #define DPP_EVENT_JWK_CSIGN "DPP-JWK-CSIGN "
+#define DPP_MAP_EVENT_C_SIGN_KEY "DPP-MAP-C-SIGN-KEY "
 
 /* MESH events */
 #define MESH_GROUP_STARTED "MESH-GROUP-STARTED "
diff --git a/wpa_supplicant/ctrl_iface.c b/wpa_supplicant/ctrl_iface.c
index 2e63747..40ac104 100644
--- a/wpa_supplicant/ctrl_iface.c
+++ b/wpa_supplicant/ctrl_iface.c
@@ -11170,6 +11170,9 @@ char * wpa_supplicant_ctrl_iface_process(struct wpa_supplicant *wpa_s,
 		reply_len = dpp_configurator_get_key_id(wpa_s->dpp,
 							atoi(buf + 25),
 							reply, reply_size);
+	} else if (os_strncmp(buf, "DPP_MAP_BSS_CONF_RESP ", 22) == 0) {
+		if (wpas_dpp_map_bss_conf_resp(wpa_s, buf + 22) < 0)
+			reply_len = -1;
 	} else if (os_strncmp(buf, "DPP_PKEX_ADD ", 13) == 0) {
 		int res;
 
diff --git a/wpa_supplicant/dpp_supplicant.c b/wpa_supplicant/dpp_supplicant.c
index b4fe647..f4b68bf 100644
--- a/wpa_supplicant/dpp_supplicant.c
+++ b/wpa_supplicant/dpp_supplicant.c
@@ -1445,6 +1445,32 @@ static void wpas_dpp_post_process_config(struct wpa_supplicant *wpa_s,
 	wpas_dpp_try_to_connect(wpa_s);
 }
 
+static int wpas_map_handle_config_obj(struct wpa_supplicant *wpa_s,
+				      struct dpp_authentication *auth,
+				      struct dpp_config_obj *conf)
+{
+	if (conf->ssid_len && conf->connector) {
+		wpa_msg(wpa_s, MSG_INFO, DPP_MAP_EVENT_CONNECTOR "ssid=%s connector=%s",
+			wpa_ssid_txt(conf->ssid, conf->ssid_len), conf->connector);
+	}
+	if (conf->ssid_len && conf->c_sign_key) {
+		char *hex;
+		size_t hexlen;
+
+		hexlen = 2 * wpabuf_len(conf->c_sign_key) + 1;
+		hex = os_malloc(hexlen);
+		if (hex) {
+			wpa_snprintf_hex(hex, hexlen,
+					 wpabuf_head(conf->c_sign_key),
+					 wpabuf_len(conf->c_sign_key));
+			wpa_msg(wpa_s, MSG_INFO, DPP_MAP_EVENT_C_SIGN_KEY "ssid=%s csign=%s",
+				wpa_ssid_txt(conf->ssid, conf->ssid_len),
+				hex);
+			os_free(hex);
+		}
+	}
+	return 0;
+}
 
 static int wpas_dpp_handle_config_obj(struct wpa_supplicant *wpa_s,
 				      struct dpp_authentication *auth,
@@ -3278,6 +3304,22 @@ skip_connector:
 	return 1;
 }
 
+int wpas_dpp_map_bss_conf_resp(struct wpa_supplicant *wpa_s, const char *cmd)
+{
+	struct dpp_authentication *auth;
+	int ret = -1;
+
+	auth = dpp_alloc_auth(wpa_s->dpp, wpa_s);
+	if (!auth)
+		return -1;
+
+	if (dpp_map_bss_conf_resp(auth, cmd) == 0) {
+		ret = 0;
+	}
+
+	wpas_map_handle_config_obj(wpa_s, auth, &auth->conf_obj[0]);
+	return ret;
+}
 
 int wpas_dpp_pkex_add(struct wpa_supplicant *wpa_s, const char *cmd)
 {
diff --git a/wpa_supplicant/dpp_supplicant.h b/wpa_supplicant/dpp_supplicant.h
index 6862137..c39d3a6 100644
--- a/wpa_supplicant/dpp_supplicant.h
+++ b/wpa_supplicant/dpp_supplicant.h
@@ -26,6 +26,7 @@ void wpas_dpp_cancel_remain_on_channel_cb(struct wpa_supplicant *wpa_s,
 void wpas_dpp_rx_action(struct wpa_supplicant *wpa_s, const u8 *src,
 			const u8 *buf, size_t len, unsigned int freq);
 int wpas_dpp_configurator_sign(struct wpa_supplicant *wpa_s, const char *cmd);
+int wpas_dpp_map_bss_conf_resp(struct wpa_supplicant *wpa_s, const char *cmd);
 int wpas_dpp_pkex_add(struct wpa_supplicant *wpa_s, const char *cmd);
 int wpas_dpp_pkex_remove(struct wpa_supplicant *wpa_s, const char *id);
 void wpas_dpp_stop(struct wpa_supplicant *wpa_s);
diff --git a/wpa_supplicant/wpa_cli.c b/wpa_supplicant/wpa_cli.c
index ffc29b5..76b1dbf 100644
--- a/wpa_supplicant/wpa_cli.c
+++ b/wpa_supplicant/wpa_cli.c
@@ -3050,6 +3050,13 @@ static int wpa_cli_cmd_dpp_configurator_sign(struct wpa_ctrl *ctrl, int argc,
 }
 
 
+static int wpa_cli_cmd_dpp_map_bss_conf_resp(struct wpa_ctrl *ctrl, int argc,
+					     char *argv[])
+{
+	return wpa_cli_cmd(ctrl, "DPP_MAP_BSS_CONF_RESP", 1, argc, argv);
+}
+
+
 static int wpa_cli_cmd_dpp_pkex_add(struct wpa_ctrl *ctrl, int argc,
 				    char *argv[])
 {
@@ -3835,6 +3842,9 @@ static const struct wpa_cli_cmd wpa_cli_commands[] = {
 	{ "dpp_configurator_sign", wpa_cli_cmd_dpp_configurator_sign, NULL,
 	  cli_cmd_flag_none,
 	  "conf=<role> configurator=<id> = generate self DPP configuration" },
+	{ "dpp_map_bss_conf_resp", wpa_cli_cmd_dpp_map_bss_conf_resp, NULL,
+	  cli_cmd_flag_none,
+	  "[curve=..][conf_obj=..]" },
 	{ "dpp_pkex_add", wpa_cli_cmd_dpp_pkex_add, NULL,
 	  cli_cmd_flag_sensitive,
 	  "add PKEX code" },
