#ifndef __LOWI_MEASUREMENT_RESULT_BASE_H__
#define __LOWI_MEASUREMENT_RESULT_BASE_H__

/*====*====*====*====*====*====*====*====*====*====*====*====*====*====*====*

        LOWI Measurement Result Base Interface Header file

GENERAL DESCRIPTION
  This file contains the structure definitions and function prototypes for
  LOWI Measurement Result Base

Copyright (c) 2012, 2016,2018 Qualcomm Technologies, Inc.
All Rights Reserved.
Confidential and Proprietary - Qualcomm Technologies, Inc

(c) 2012 Qualcomm Atheros, Inc.
  All Rights Reserved.
  Qualcomm Atheros Confidential and Proprietary.

=============================================================================*/

#include <base_util/postcard.h>
#include <inc/lowi_const.h>
#include <inc/lowi_scan_measurement.h>
#include <inc/lowi_response.h>
#include "lowi_scan_measurement_extn.h"
#include "lowi_response_extn.h"

namespace qc_loc_fw
{

// Forward declaration
class LOWIMeasurementResult;

/**
 * Driver errors
 */
enum eLOWIDriverError
{
  /** No error, success */
  LOWI_DRIVER_ERROR_NONE = 0,
  /** LOWI LP service found */
  LOWI_LP_SERVICE_FOUND = 1,
  /** LOWI LP service is lost */
  LOWI_LP_SERVICE_ERROR = 2,
};

/**
 * This class defines the measurement taken for every scan request.
 * This contains the measurements corresponding the discovery, ranging
 * and background scan requests. However, the fields are valid /
 * invalid based on type of scan as documented below.
 */
class LOWIMeasurementResultBase
{
private:
  static const char* const TAG;

  /** Indicates that the Result is generated by LOWI-LP */
  bool resultFromLOWILP;

public:

  /** Driver error */
  eLOWIDriverError driverError;
  /** Type of measurement*/
  LOWIDiscoveryScanResponse::eScanTypeResponse  scanType;
  /** Scan Status*/
  LOWIResponse::eScanStatus        scanStatus;
  /** Time at which the measurements are taken*/
  int64              measurementTimestamp;
  /** Vector containing the scan measurements for each AP */
  vector <LOWIScanMeasurement*> scanMeasurements;
  /** Request to which the results correspond*/
  LOWIRequest*       request;
  /** flag used to determine which wireless driver provided the results, true
   *  if result comes from wigig driver, otherwise false. */
  bool isWigigResult;
  /**
   *  Indicates if the Result is generated by LOWI-LP
   *  @return bool true : generated from LOWI-LP, false otherwise
   */
  bool isResultFromLOWILP ()
  {
    return resultFromLOWILP;
  }

  /**
   * Creates an InPostcard and inserts the measurement pointer
   * as a blob to it.
   * @param LOWIMeasurementResult* Scan Measurements
   * @return InPostcard
   */
  static InPostcard* createPostcard

  (LOWIMeasurementResult* result);

  /**
   * Parses the InPostcard and retrieves the Scan Measurement pointer
   * stored as a blob in it
   * @param InPostcard* Card
   * @return Measurement Result pointer
   */
  static LOWIMeasurementResult* parseScanMeasurement
  (InPostcard* card);

  virtual ~LOWIMeasurementResultBase ()
  {
  }

  /**
   * Constructor
   * @param bool Indicates, if the result is generated from LOWI-LP
   */
  LOWIMeasurementResultBase (bool result_from_lowi_lp = false);
};

} // namespace qc_loc_fw

#endif //#ifndef __LOWI_MEASUREMENT_RESULT_BASE_H__
